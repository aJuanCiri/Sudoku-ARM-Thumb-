   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"sudoku_2015.c"
  21              	.Ltext0:
  22              		.file 1 "../sudoku_2015.c"
 1789              		.align	2
 1792              	primeraEjecucion:
 1793 0000 01000000 		.word	1
 1794              		.global	tiempoCalculo
 1795              		.bss
 1796              		.align	2
 1799              	tiempoCalculo:
 1800 0000 00000000 		.space	4
 1801              		.global	cuadricula
 1802              		.data
 1803 0004 00000000 		.align	5
 1803      00000000 
 1803      00000000 
 1803      00000000 
 1803      00000000 
 1806              	cuadricula:
 1807 0020 0098     		.short	-26624
 1808 0022 0068     		.short	26624
 1809 0024 0000     		.short	0
 1810 0026 0000     		.short	0
 1811 0028 0000     		.short	0
 1812 002a 0000     		.short	0
 1813 002c 0078     		.short	30720
 1814 002e 0000     		.short	0
 1815 0030 0088     		.short	-30720
 1816 0032 0000     		.short	0
 1817 0034 0000     		.short	0
 1818 0036 0000     		.short	0
 1819 0038 0000     		.short	0
 1820 003a 0000     		.short	0
 1821 003c 0000     		.short	0
 1822 003e 0000     		.short	0
 1823 0040 0088     		.short	-30720
 1824 0042 0000     		.short	0
 1825 0044 0000     		.short	0
 1826 0046 0000     		.short	0
 1827 0048 0000     		.short	0
 1828 004a 0048     		.short	18432
 1829 004c 0038     		.short	14336
 1830 004e 0000     		.short	0
 1831 0050 0000     		.short	0
 1832 0052 0000     		.short	0
 1833 0054 0000     		.short	0
 1834 0056 0000     		.short	0
 1835 0058 0000     		.short	0
 1836 005a 0000     		.short	0
 1837 005c 0000     		.short	0
 1838 005e 0000     		.short	0
 1839 0060 0018     		.short	6144
 1840 0062 0000     		.short	0
 1841 0064 0000     		.short	0
 1842 0066 0058     		.short	22528
 1843 0068 0000     		.short	0
 1844 006a 0000     		.short	0
 1845 006c 0000     		.short	0
 1846 006e 0000     		.short	0
 1847 0070 0000     		.short	0
 1848 0072 0000     		.short	0
 1849 0074 0000     		.short	0
 1850 0076 0000     		.short	0
 1851 0078 0000     		.short	0
 1852 007a 0000     		.short	0
 1853 007c 0000     		.short	0
 1854 007e 0000     		.short	0
 1855 0080 0000     		.short	0
 1856 0082 0000     		.short	0
 1857 0084 0000     		.short	0
 1858 0086 0000     		.short	0
 1859 0088 0000     		.short	0
 1860 008a 0000     		.short	0
 1861 008c 0018     		.short	6144
 1862 008e 0078     		.short	30720
 1863 0090 0068     		.short	26624
 1864 0092 0000     		.short	0
 1865 0094 0000     		.short	0
 1866 0096 0000     		.short	0
 1867 0098 0000     		.short	0
 1868 009a 0000     		.short	0
 1869 009c 0000     		.short	0
 1870 009e 0000     		.short	0
 1871 00a0 0028     		.short	10240
 1872 00a2 0000     		.short	0
 1873 00a4 0000     		.short	0
 1874 00a6 0000     		.short	0
 1875 00a8 0098     		.short	-26624
 1876 00aa 0038     		.short	14336
 1877 00ac 0000     		.short	0
 1878 00ae 0000     		.short	0
 1879 00b0 0058     		.short	22528
 1880 00b2 0000     		.short	0
 1881 00b4 0000     		.short	0
 1882 00b6 0000     		.short	0
 1883 00b8 0000     		.short	0
 1884 00ba 0000     		.short	0
 1885 00bc 0000     		.short	0
 1886 00be 0000     		.short	0
 1887 00c0 0078     		.short	30720
 1888 00c2 0000     		.short	0
 1889 00c4 0088     		.short	-30720
 1890 00c6 0000     		.short	0
 1891 00c8 0000     		.short	0
 1892 00ca 0000     		.short	0
 1893 00cc 0000     		.short	0
 1894 00ce 0000     		.short	0
 1895 00d0 0000     		.short	0
 1896 00d2 0000     		.short	0
 1897 00d4 0000     		.short	0
 1898 00d6 0000     		.short	0
 1899 00d8 0000     		.short	0
 1900 00da 0000     		.short	0
 1901 00dc 0000     		.short	0
 1902 00de 0000     		.short	0
 1903 00e0 0000     		.short	0
 1904 00e2 0000     		.short	0
 1905 00e4 0078     		.short	30720
 1906 00e6 0000     		.short	0
 1907 00e8 0038     		.short	14336
 1908 00ea 0028     		.short	10240
 1909 00ec 0000     		.short	0
 1910 00ee 0048     		.short	18432
 1911 00f0 0000     		.short	0
 1912 00f2 0000     		.short	0
 1913 00f4 0000     		.short	0
 1914 00f6 0000     		.short	0
 1915 00f8 0000     		.short	0
 1916 00fa 0000     		.short	0
 1917 00fc 0000     		.short	0
 1918 00fe 0000     		.short	0
 1919 0100 0038     		.short	14336
 1920 0102 0088     		.short	-30720
 1921 0104 0028     		.short	10240
 1922 0106 0018     		.short	6144
 1923 0108 0000     		.short	0
 1924 010a 0058     		.short	22528
 1925 010c 0068     		.short	26624
 1926 010e 0000     		.short	0
 1927 0110 0000     		.short	0
 1928 0112 0000     		.short	0
 1929 0114 0000     		.short	0
 1930 0116 0000     		.short	0
 1931 0118 0000     		.short	0
 1932 011a 0000     		.short	0
 1933 011c 0000     		.short	0
 1934 011e 0000     		.short	0
 1935 0120 0000     		.short	0
 1936 0122 0048     		.short	18432
 1937 0124 0018     		.short	6144
 1938 0126 0000     		.short	0
 1939 0128 0000     		.short	0
 1940 012a 0098     		.short	-26624
 1941 012c 0058     		.short	22528
 1942 012e 0028     		.short	10240
 1943 0130 0000     		.short	0
 1944 0132 0000     		.short	0
 1945 0134 0000     		.short	0
 1946 0136 0000     		.short	0
 1947 0138 0000     		.short	0
 1948 013a 0000     		.short	0
 1949 013c 0000     		.short	0
 1950 013e 0000     		.short	0
 1951              		.comm	cAux,288,32
 1952              		.comm	cOriginal,288,4
 1953              		.text
 1954              		.align	2
 1955              		.global	celda_poner_valor
 1957              	celda_poner_valor:
 1958              	.LFB0:
   1:../sudoku_2015.c **** /************************************************************************************************/
   2:../sudoku_2015.c **** /* Fichero: sudoku_2015.c																		*/
   3:../sudoku_2015.c **** /* Alejandro Guiu Pérez - 680669 																*/
   4:../sudoku_2015.c **** /* Álvaro Juan Ciriaco - 682531											    				    */
   5:../sudoku_2015.c **** /************************************************************************************************/
   6:../sudoku_2015.c **** 
   7:../sudoku_2015.c **** #include <inttypes.h>
   8:../sudoku_2015.c **** #include "timer2.h"
   9:../sudoku_2015.c **** 
  10:../sudoku_2015.c **** // Tamaños de la cuadricula
  11:../sudoku_2015.c **** // Se utilizan 16 columnas para facilitar la visualización
  12:../sudoku_2015.c **** enum {NUM_FILAS = 9, NUM_COLUMNAS = 16};
  13:../sudoku_2015.c **** 
  14:../sudoku_2015.c **** enum {FALSE = 0, TRUE = 1};
  15:../sudoku_2015.c **** 
  16:../sudoku_2015.c **** typedef uint16_t CELDA; 
  17:../sudoku_2015.c **** // La información de cada celda está agrupada en 16 bits con el siguiente formato (empezando en el 
  18:../sudoku_2015.c **** // 4 MSB VALOR				0001 0000 0010 0000	= 0x1020	    Valor actual: 1
  19:../sudoku_2015.c **** // 1 bit PISTA													Pista: 0 (te marca si ya esta puesto en el sudoku y no puedes cambiarlo)
  20:../sudoku_2015.c **** // 1 bit ERROR													Error: 0
  21:../sudoku_2015.c **** // 1 bit no usado												Bit no usado: 0
  22:../sudoku_2015.c **** // 9 LSB CANDIDATOS												Candidatos: el 4
  23:../sudoku_2015.c **** 
  24:../sudoku_2015.c **** int primeraEjecucion = TRUE;	//Es la primera ejecucion?
  25:../sudoku_2015.c **** uint32_t tiempoCalculo = 0;
  26:../sudoku_2015.c **** 
  27:../sudoku_2015.c **** CELDA cuadricula [NUM_FILAS][NUM_COLUMNAS] __attribute__((aligned(32)))= {
  28:../sudoku_2015.c **** 			{0x9800,0x6800,0x0000,0x0000,0x0000,0x0000,0x7800,0x0000,0x8800,0,0,0,0,0,0,0},
  29:../sudoku_2015.c **** 			{0x8800,0x0000,0x0000,0x0000,0x0000,0x4800,0x3800,0x0000,0x0000,0,0,0,0,0,0,0},
  30:../sudoku_2015.c **** 			{0x1800,0x0000,0x0000,0x5800,0x0000,0x0000,0x0000,0x0000,0x0000,0,0,0,0,0,0,0},
  31:../sudoku_2015.c **** 			{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0x7800,0x6800,0,0,0,0,0,0,0},
  32:../sudoku_2015.c **** 			{0x2800,0x0000,0x0000,0x0000,0x9800,0x3800,0x0000,0x0000,0x5800,0,0,0,0,0,0,0},
  33:../sudoku_2015.c **** 			{0x7800,0x0000,0x8800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0,0,0,0,0,0,0},
  34:../sudoku_2015.c **** 			{0x0000,0x0000,0x7800,0x0000,0x3800,0x2800,0x0000,0x4800,0x0000,0,0,0,0,0,0,0},
  35:../sudoku_2015.c **** 			{0x3800,0x8800,0x2800,0x1800,0x0000,0x5800,0x6800,0x0000,0x0000,0,0,0,0,0,0,0},
  36:../sudoku_2015.c **** 			{0x0000,0x4800,0x1800,0x0000,0x0000,0x9800,0x5800,0x2800,0x0000,0,0,0,0,0,0,0}
  37:../sudoku_2015.c **** 	};
  38:../sudoku_2015.c **** CELDA cAux[NUM_FILAS][NUM_COLUMNAS]__attribute__((aligned(32)));
  39:../sudoku_2015.c **** CELDA cOriginal[NUM_FILAS][NUM_COLUMNAS];
  40:../sudoku_2015.c **** 
  41:../sudoku_2015.c **** inline void celda_poner_valor(CELDA *celdaptr, uint8_t val){	//Guarda los 12 primeros bits tal cual
 1959              		.loc 1 41 0
 1960              		.cfi_startproc
 1961              		@ Function supports interworking.
 1962              		@ args = 0, pretend = 0, frame = 8
 1963              		@ frame_needed = 1, uses_anonymous_args = 0
 1964 0000 0DC0A0E1 		mov	ip, sp
 1965              	.LCFI0:
 1966              		.cfi_def_cfa_register 12
 1967 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1968 0008 04B04CE2 		sub	fp, ip, #4
 1969              		.cfi_offset 14, -8
 1970              		.cfi_offset 13, -12
 1971              		.cfi_offset 11, -16
 1972              	.LCFI1:
 1973              		.cfi_def_cfa 11, 4
 1974 000c 08D04DE2 		sub	sp, sp, #8
 1975 0010 10000BE5 		str	r0, [fp, #-16]
 1976 0014 0130A0E1 		mov	r3, r1
 1977 0018 11304BE5 		strb	r3, [fp, #-17]
  42:../sudoku_2015.c **** 	*celdaptr = (*celdaptr & 0x0FFF) | ((val & 0x000F) << 12);  //pone el valor en los ultimos 4 bits 
 1978              		.loc 1 42 0
 1979 001c 10301BE5 		ldr	r3, [fp, #-16]
 1980 0020 B030D3E1 		ldrh	r3, [r3, #0]
 1981 0024 0338A0E1 		mov	r3, r3, asl #16
 1982 0028 2338A0E1 		mov	r3, r3, lsr #16
 1983 002c 033AA0E1 		mov	r3, r3, asl #20
 1984 0030 233AA0E1 		mov	r3, r3, lsr #20
 1985 0034 0338A0E1 		mov	r3, r3, asl #16
 1986 0038 2328A0E1 		mov	r2, r3, lsr #16
 1987 003c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1988 0040 0336A0E1 		mov	r3, r3, asl #12
 1989 0044 0338A0E1 		mov	r3, r3, asl #16
 1990 0048 2338A0E1 		mov	r3, r3, lsr #16
 1991 004c 033082E1 		orr	r3, r2, r3
 1992 0050 0338A0E1 		mov	r3, r3, asl #16
 1993 0054 2338A0E1 		mov	r3, r3, lsr #16
 1994 0058 0338A0E1 		mov	r3, r3, asl #16
 1995 005c 2328A0E1 		mov	r2, r3, lsr #16
 1996 0060 10301BE5 		ldr	r3, [fp, #-16]
 1997 0064 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  43:../sudoku_2015.c **** }
 1998              		.loc 1 43 0
 1999 0068 0CD04BE2 		sub	sp, fp, #12
 2000 006c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2001 0070 1EFF2FE1 		bx	lr
 2002              		.cfi_endproc
 2003              	.LFE0:
 2005              		.align	2
 2006              		.global	celda_leer_valor
 2008              	celda_leer_valor:
 2009              	.LFB1:
  44:../sudoku_2015.c **** inline uint8_t celda_leer_valor(CELDA celda){					//Te saca los bits 16-13
 2010              		.loc 1 44 0
 2011              		.cfi_startproc
 2012              		@ Function supports interworking.
 2013              		@ args = 0, pretend = 0, frame = 8
 2014              		@ frame_needed = 1, uses_anonymous_args = 0
 2015 0074 0DC0A0E1 		mov	ip, sp
 2016              	.LCFI2:
 2017              		.cfi_def_cfa_register 12
 2018 0078 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2019 007c 04B04CE2 		sub	fp, ip, #4
 2020              		.cfi_offset 14, -8
 2021              		.cfi_offset 13, -12
 2022              		.cfi_offset 11, -16
 2023              	.LCFI3:
 2024              		.cfi_def_cfa 11, 4
 2025 0080 08D04DE2 		sub	sp, sp, #8
 2026 0084 0030A0E1 		mov	r3, r0
 2027 0088 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  45:../sudoku_2015.c **** 	return celda >> 12;
 2028              		.loc 1 45 0
 2029 008c BE305BE1 		ldrh	r3, [fp, #-14]
 2030 0090 2336A0E1 		mov	r3, r3, lsr #12
 2031 0094 0338A0E1 		mov	r3, r3, asl #16
 2032 0098 2338A0E1 		mov	r3, r3, lsr #16
 2033 009c FF3003E2 		and	r3, r3, #255
  46:../sudoku_2015.c **** }
 2034              		.loc 1 46 0
 2035 00a0 0300A0E1 		mov	r0, r3
 2036 00a4 0CD04BE2 		sub	sp, fp, #12
 2037 00a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2038 00ac 1EFF2FE1 		bx	lr
 2039              		.cfi_endproc
 2040              	.LFE1:
 2042              		.align	2
 2043              		.global	obtenerValor
 2045              	obtenerValor:
 2046              	.LFB2:
  47:../sudoku_2015.c **** 
  48:../sudoku_2015.c **** int obtenerValor(int i, int j){
 2047              		.loc 1 48 0
 2048              		.cfi_startproc
 2049              		@ Function supports interworking.
 2050              		@ args = 0, pretend = 0, frame = 8
 2051              		@ frame_needed = 1, uses_anonymous_args = 0
 2052 00b0 0DC0A0E1 		mov	ip, sp
 2053              	.LCFI4:
 2054              		.cfi_def_cfa_register 12
 2055 00b4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2056 00b8 04B04CE2 		sub	fp, ip, #4
 2057              		.cfi_offset 14, -8
 2058              		.cfi_offset 13, -12
 2059              		.cfi_offset 11, -16
 2060              	.LCFI5:
 2061              		.cfi_def_cfa 11, 4
 2062 00bc 08D04DE2 		sub	sp, sp, #8
 2063 00c0 10000BE5 		str	r0, [fp, #-16]
 2064 00c4 14100BE5 		str	r1, [fp, #-20]
  49:../sudoku_2015.c **** 	return celda_leer_valor(cuadricula[i][j]);
 2065              		.loc 1 49 0
 2066 00c8 34209FE5 		ldr	r2, .L4
 2067 00cc 10301BE5 		ldr	r3, [fp, #-16]
 2068 00d0 0312A0E1 		mov	r1, r3, asl #4
 2069 00d4 14301BE5 		ldr	r3, [fp, #-20]
 2070 00d8 033081E0 		add	r3, r1, r3
 2071 00dc 8330A0E1 		mov	r3, r3, asl #1
 2072 00e0 033082E0 		add	r3, r2, r3
 2073 00e4 B030D3E1 		ldrh	r3, [r3, #0]
 2074 00e8 0300A0E1 		mov	r0, r3
 2075 00ec FEFFFFEB 		bl	celda_leer_valor
 2076 00f0 0030A0E1 		mov	r3, r0
  50:../sudoku_2015.c **** }
 2077              		.loc 1 50 0
 2078 00f4 0300A0E1 		mov	r0, r3
 2079 00f8 0CD04BE2 		sub	sp, fp, #12
 2080 00fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2081 0100 1EFF2FE1 		bx	lr
 2082              	.L5:
 2083              		.align	2
 2084              	.L4:
 2085 0104 00000000 		.word	cuadricula
 2086              		.cfi_endproc
 2087              	.LFE2:
 2089              		.align	2
 2090              		.global	esPista
 2092              	esPista:
 2093              	.LFB3:
  51:../sudoku_2015.c **** 
  52:../sudoku_2015.c **** int esPista(int i, int j){
 2094              		.loc 1 52 0
 2095              		.cfi_startproc
 2096              		@ Function supports interworking.
 2097              		@ args = 0, pretend = 0, frame = 8
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
 2099 0108 0DC0A0E1 		mov	ip, sp
 2100              	.LCFI6:
 2101              		.cfi_def_cfa_register 12
 2102 010c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2103 0110 04B04CE2 		sub	fp, ip, #4
 2104              		.cfi_offset 14, -8
 2105              		.cfi_offset 13, -12
 2106              		.cfi_offset 11, -16
 2107              	.LCFI7:
 2108              		.cfi_def_cfa 11, 4
 2109 0114 08D04DE2 		sub	sp, sp, #8
 2110 0118 10000BE5 		str	r0, [fp, #-16]
 2111 011c 14100BE5 		str	r1, [fp, #-20]
  53:../sudoku_2015.c **** 	return cuadricula[i][j] & 0x800;
 2112              		.loc 1 53 0
 2113 0120 2C209FE5 		ldr	r2, .L7
 2114 0124 10301BE5 		ldr	r3, [fp, #-16]
 2115 0128 0312A0E1 		mov	r1, r3, asl #4
 2116 012c 14301BE5 		ldr	r3, [fp, #-20]
 2117 0130 033081E0 		add	r3, r1, r3
 2118 0134 8330A0E1 		mov	r3, r3, asl #1
 2119 0138 033082E0 		add	r3, r2, r3
 2120 013c B030D3E1 		ldrh	r3, [r3, #0]
 2121 0140 023B03E2 		and	r3, r3, #2048
  54:../sudoku_2015.c **** }
 2122              		.loc 1 54 0
 2123 0144 0300A0E1 		mov	r0, r3
 2124 0148 0CD04BE2 		sub	sp, fp, #12
 2125 014c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2126 0150 1EFF2FE1 		bx	lr
 2127              	.L8:
 2128              		.align	2
 2129              	.L7:
 2130 0154 00000000 		.word	cuadricula
 2131              		.cfi_endproc
 2132              	.LFE3:
 2134              		.align	2
 2135              		.global	esError
 2137              	esError:
 2138              	.LFB4:
  55:../sudoku_2015.c **** 
  56:../sudoku_2015.c **** int esError(int i, int j){
 2139              		.loc 1 56 0
 2140              		.cfi_startproc
 2141              		@ Function supports interworking.
 2142              		@ args = 0, pretend = 0, frame = 8
 2143              		@ frame_needed = 1, uses_anonymous_args = 0
 2144 0158 0DC0A0E1 		mov	ip, sp
 2145              	.LCFI8:
 2146              		.cfi_def_cfa_register 12
 2147 015c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2148 0160 04B04CE2 		sub	fp, ip, #4
 2149              		.cfi_offset 14, -8
 2150              		.cfi_offset 13, -12
 2151              		.cfi_offset 11, -16
 2152              	.LCFI9:
 2153              		.cfi_def_cfa 11, 4
 2154 0164 08D04DE2 		sub	sp, sp, #8
 2155 0168 10000BE5 		str	r0, [fp, #-16]
 2156 016c 14100BE5 		str	r1, [fp, #-20]
  57:../sudoku_2015.c **** 	return cuadricula[i][j] & 0x400;
 2157              		.loc 1 57 0
 2158 0170 2C209FE5 		ldr	r2, .L10
 2159 0174 10301BE5 		ldr	r3, [fp, #-16]
 2160 0178 0312A0E1 		mov	r1, r3, asl #4
 2161 017c 14301BE5 		ldr	r3, [fp, #-20]
 2162 0180 033081E0 		add	r3, r1, r3
 2163 0184 8330A0E1 		mov	r3, r3, asl #1
 2164 0188 033082E0 		add	r3, r2, r3
 2165 018c B030D3E1 		ldrh	r3, [r3, #0]
 2166 0190 013B03E2 		and	r3, r3, #1024
  58:../sudoku_2015.c **** }
 2167              		.loc 1 58 0
 2168 0194 0300A0E1 		mov	r0, r3
 2169 0198 0CD04BE2 		sub	sp, fp, #12
 2170 019c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2171 01a0 1EFF2FE1 		bx	lr
 2172              	.L11:
 2173              		.align	2
 2174              	.L10:
 2175 01a4 00000000 		.word	cuadricula
 2176              		.cfi_endproc
 2177              	.LFE4:
 2179              		.align	2
 2180              		.global	esCandidato
 2182              	esCandidato:
 2183              	.LFB5:
  59:../sudoku_2015.c **** 
  60:../sudoku_2015.c **** int esCandidato(int i, int j, int candidato) {
 2184              		.loc 1 60 0
 2185              		.cfi_startproc
 2186              		@ Function supports interworking.
 2187              		@ args = 0, pretend = 0, frame = 16
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189 01a8 0DC0A0E1 		mov	ip, sp
 2190              	.LCFI10:
 2191              		.cfi_def_cfa_register 12
 2192 01ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2193 01b0 04B04CE2 		sub	fp, ip, #4
 2194              		.cfi_offset 14, -8
 2195              		.cfi_offset 13, -12
 2196              		.cfi_offset 11, -16
 2197              	.LCFI11:
 2198              		.cfi_def_cfa 11, 4
 2199 01b4 10D04DE2 		sub	sp, sp, #16
 2200 01b8 10000BE5 		str	r0, [fp, #-16]
 2201 01bc 14100BE5 		str	r1, [fp, #-20]
 2202 01c0 18200BE5 		str	r2, [fp, #-24]
  61:../sudoku_2015.c **** 	return !((cuadricula[i][j] & 1<<(candidato-1))==0);
 2203              		.loc 1 61 0
 2204 01c4 3C209FE5 		ldr	r2, .L13
 2205 01c8 10301BE5 		ldr	r3, [fp, #-16]
 2206 01cc 0312A0E1 		mov	r1, r3, asl #4
 2207 01d0 14301BE5 		ldr	r3, [fp, #-20]
 2208 01d4 033081E0 		add	r3, r1, r3
 2209 01d8 8330A0E1 		mov	r3, r3, asl #1
 2210 01dc 033082E0 		add	r3, r2, r3
 2211 01e0 B030D3E1 		ldrh	r3, [r3, #0]
 2212 01e4 0320A0E1 		mov	r2, r3
 2213 01e8 18301BE5 		ldr	r3, [fp, #-24]
 2214 01ec 013043E2 		sub	r3, r3, #1
 2215 01f0 5233A0E1 		mov	r3, r2, asr r3
 2216 01f4 013003E2 		and	r3, r3, #1
  62:../sudoku_2015.c **** }
 2217              		.loc 1 62 0
 2218 01f8 0300A0E1 		mov	r0, r3
 2219 01fc 0CD04BE2 		sub	sp, fp, #12
 2220 0200 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2221 0204 1EFF2FE1 		bx	lr
 2222              	.L14:
 2223              		.align	2
 2224              	.L13:
 2225 0208 00000000 		.word	cuadricula
 2226              		.cfi_endproc
 2227              	.LFE5:
 2229              		.align	2
 2230              		.global	sudoku_candidatos_c
 2232              	sudoku_candidatos_c:
 2233              	.LFB6:
  63:../sudoku_2015.c **** 
  64:../sudoku_2015.c **** extern int sudoku_recalcular_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]);     //funcion a implem
  65:../sudoku_2015.c **** extern int sudoku_candidatos_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int i, int j);     //fu
  66:../sudoku_2015.c **** extern int sudoku_candidatos_thumb(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int i, int j);   //fu
  67:../sudoku_2015.c **** extern int sudoku_recalcular_arm_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]);
  68:../sudoku_2015.c **** extern int sudoku_recalcular_arm_thumb(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]);
  69:../sudoku_2015.c **** 
  70:../sudoku_2015.c **** 
  71:../sudoku_2015.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  72:../sudoku_2015.c **** // dada una determinada celda encuentra los posibles valores candidatos y guarda el mapa de bits en
  73:../sudoku_2015.c **** // retorna false si la celda esta vacia, true si contiene un valor
  74:../sudoku_2015.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  75:../sudoku_2015.c **** int sudoku_candidatos_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], uint8_t fila, uint8_t columna) {
 2234              		.loc 1 75 0
 2235              		.cfi_startproc
 2236              		@ Function supports interworking.
 2237              		@ args = 0, pretend = 0, frame = 24
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239 020c 0DC0A0E1 		mov	ip, sp
 2240              	.LCFI12:
 2241              		.cfi_def_cfa_register 12
 2242 0210 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2243 0214 04B04CE2 		sub	fp, ip, #4
 2244              		.cfi_offset 14, -8
 2245              		.cfi_offset 13, -12
 2246              		.cfi_offset 11, -16
 2247              	.LCFI13:
 2248              		.cfi_def_cfa 11, 4
 2249 0218 18D04DE2 		sub	sp, sp, #24
 2250 021c 20000BE5 		str	r0, [fp, #-32]
 2251 0220 0230A0E1 		mov	r3, r2
 2252 0224 0120A0E1 		mov	r2, r1
 2253 0228 21204BE5 		strb	r2, [fp, #-33]
 2254 022c 22304BE5 		strb	r3, [fp, #-34]
  76:../sudoku_2015.c **** 	//iniciar candidatos
  77:../sudoku_2015.c **** 	cuadricula[fila][columna] |= 0x01FF;
 2255              		.loc 1 77 0
 2256 0230 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2257 0234 8332A0E1 		mov	r3, r3, asl #5
 2258 0238 20201BE5 		ldr	r2, [fp, #-32]
 2259 023c 031082E0 		add	r1, r2, r3
 2260 0240 22005BE5 		ldrb	r0, [fp, #-34]	@ zero_extendqisi2
 2261 0244 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2262 0248 8332A0E1 		mov	r3, r3, asl #5
 2263 024c 20201BE5 		ldr	r2, [fp, #-32]
 2264 0250 032082E0 		add	r2, r2, r3
 2265 0254 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2266 0258 8330A0E1 		mov	r3, r3, asl #1
 2267 025c 033082E0 		add	r3, r2, r3
 2268 0260 B030D3E1 		ldrh	r3, [r3, #0]
 2269 0264 A334E0E1 		mvn	r3, r3, lsr #9
 2270 0268 8334E0E1 		mvn	r3, r3, asl #9
 2271 026c 0338A0E1 		mov	r3, r3, asl #16
 2272 0270 2328A0E1 		mov	r2, r3, lsr #16
 2273 0274 8030A0E1 		mov	r3, r0, asl #1
 2274 0278 033081E0 		add	r3, r1, r3
 2275 027c B020C3E1 		strh	r2, [r3, #0]	@ movhi
  78:../sudoku_2015.c **** 	//recorrer fila recalculando candidatos
  79:../sudoku_2015.c **** 	uint8_t filaX = 0;
 2276              		.loc 1 79 0
 2277 0280 0030A0E3 		mov	r3, #0
 2278 0284 0D304BE5 		strb	r3, [fp, #-13]
  80:../sudoku_2015.c **** 	uint8_t columnaX = 0;
 2279              		.loc 1 80 0
 2280 0288 0030A0E3 		mov	r3, #0
 2281 028c 0E304BE5 		strb	r3, [fp, #-14]
  81:../sudoku_2015.c **** 	while(columnaX<9){
 2282              		.loc 1 81 0
 2283 0290 440000EA 		b	.L16
 2284              	.L19:
  82:../sudoku_2015.c **** 		if (((cuadricula[fila][columnaX] & 0x0800) != 0) ||
 2285              		.loc 1 82 0
 2286 0294 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2287 0298 8332A0E1 		mov	r3, r3, asl #5
 2288 029c 20201BE5 		ldr	r2, [fp, #-32]
 2289 02a0 032082E0 		add	r2, r2, r3
 2290 02a4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2291 02a8 8330A0E1 		mov	r3, r3, asl #1
 2292 02ac 033082E0 		add	r3, r2, r3
 2293 02b0 B030D3E1 		ldrh	r3, [r3, #0]
 2294 02b4 023B03E2 		and	r3, r3, #2048
 2295 02b8 000053E3 		cmp	r3, #0
 2296 02bc 0A00001A 		bne	.L17
  83:../sudoku_2015.c **** 				((cuadricula[fila][columnaX] & 0xF000) != 0)) { 			//Si es pista lo añadimos o no es pista pero
 2297              		.loc 1 83 0 discriminator 1
 2298 02c0 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2299 02c4 8332A0E1 		mov	r3, r3, asl #5
 2300 02c8 20201BE5 		ldr	r2, [fp, #-32]
 2301 02cc 032082E0 		add	r2, r2, r3
 2302 02d0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2303 02d4 8330A0E1 		mov	r3, r3, asl #1
 2304 02d8 033082E0 		add	r3, r2, r3
 2305 02dc B030D3E1 		ldrh	r3, [r3, #0]
 2306 02e0 0F3A03E2 		and	r3, r3, #61440
  82:../sudoku_2015.c **** 		if (((cuadricula[fila][columnaX] & 0x0800) != 0) ||
 2307              		.loc 1 82 0 discriminator 1
 2308 02e4 000053E3 		cmp	r3, #0
 2309 02e8 2B00000A 		beq	.L18
 2310              	.L17:
 2311              	.LBB2:
  84:../sudoku_2015.c **** 			uint8_t valor = celda_leer_valor(cuadricula[fila][columnaX]);	//Sacamos el valor
 2312              		.loc 1 84 0
 2313 02ec 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2314 02f0 8332A0E1 		mov	r3, r3, asl #5
 2315 02f4 20201BE5 		ldr	r2, [fp, #-32]
 2316 02f8 032082E0 		add	r2, r2, r3
 2317 02fc 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2318 0300 8330A0E1 		mov	r3, r3, asl #1
 2319 0304 033082E0 		add	r3, r2, r3
 2320 0308 B030D3E1 		ldrh	r3, [r3, #0]
 2321 030c 0300A0E1 		mov	r0, r3
 2322 0310 FEFFFFEB 		bl	celda_leer_valor
 2323 0314 0030A0E1 		mov	r3, r0
 2324 0318 15304BE5 		strb	r3, [fp, #-21]
  85:../sudoku_2015.c **** 			cuadricula[fila][columna] &= ~(1 << (valor-1));					//Ponemos el valor a 0 (no se puede poner)
 2325              		.loc 1 85 0
 2326 031c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2327 0320 8332A0E1 		mov	r3, r3, asl #5
 2328 0324 20201BE5 		ldr	r2, [fp, #-32]
 2329 0328 031082E0 		add	r1, r2, r3
 2330 032c 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2331 0330 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2332 0334 8222A0E1 		mov	r2, r2, asl #5
 2333 0338 20001BE5 		ldr	r0, [fp, #-32]
 2334 033c 020080E0 		add	r0, r0, r2
 2335 0340 22205BE5 		ldrb	r2, [fp, #-34]	@ zero_extendqisi2
 2336 0344 8220A0E1 		mov	r2, r2, asl #1
 2337 0348 022080E0 		add	r2, r0, r2
 2338 034c B020D2E1 		ldrh	r2, [r2, #0]
 2339 0350 0228A0E1 		mov	r2, r2, asl #16
 2340 0354 2208A0E1 		mov	r0, r2, lsr #16
 2341 0358 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 2342 035c 012042E2 		sub	r2, r2, #1
 2343 0360 01C0A0E3 		mov	ip, #1
 2344 0364 1C22A0E1 		mov	r2, ip, asl r2
 2345 0368 0228A0E1 		mov	r2, r2, asl #16
 2346 036c 2228A0E1 		mov	r2, r2, lsr #16
 2347 0370 0220E0E1 		mvn	r2, r2
 2348 0374 0228A0E1 		mov	r2, r2, asl #16
 2349 0378 2228A0E1 		mov	r2, r2, lsr #16
 2350 037c 022000E0 		and	r2, r0, r2
 2351 0380 0228A0E1 		mov	r2, r2, asl #16
 2352 0384 2228A0E1 		mov	r2, r2, lsr #16
 2353 0388 0228A0E1 		mov	r2, r2, asl #16
 2354 038c 2228A0E1 		mov	r2, r2, lsr #16
 2355 0390 8330A0E1 		mov	r3, r3, asl #1
 2356 0394 033081E0 		add	r3, r1, r3
 2357 0398 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2358              	.L18:
 2359              	.LBE2:
  86:../sudoku_2015.c **** 		}
  87:../sudoku_2015.c **** 		columnaX++;
 2360              		.loc 1 87 0
 2361 039c 0E305BE5 		ldrb	r3, [fp, #-14]
 2362 03a0 013083E2 		add	r3, r3, #1
 2363 03a4 0E304BE5 		strb	r3, [fp, #-14]
 2364              	.L16:
  81:../sudoku_2015.c **** 	while(columnaX<9){
 2365              		.loc 1 81 0 discriminator 1
 2366 03a8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2367 03ac 080053E3 		cmp	r3, #8
 2368 03b0 B7FFFF9A 		bls	.L19
  88:../sudoku_2015.c **** 	}
  89:../sudoku_2015.c **** 	//recorer columna recalculando candidatos
  90:../sudoku_2015.c **** 	while(filaX<9){
 2369              		.loc 1 90 0
 2370 03b4 440000EA 		b	.L20
 2371              	.L23:
  91:../sudoku_2015.c **** 		if (((cuadricula[filaX][columna] & 0x0800) != 0) ||
 2372              		.loc 1 91 0
 2373 03b8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2374 03bc 8332A0E1 		mov	r3, r3, asl #5
 2375 03c0 20201BE5 		ldr	r2, [fp, #-32]
 2376 03c4 032082E0 		add	r2, r2, r3
 2377 03c8 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2378 03cc 8330A0E1 		mov	r3, r3, asl #1
 2379 03d0 033082E0 		add	r3, r2, r3
 2380 03d4 B030D3E1 		ldrh	r3, [r3, #0]
 2381 03d8 023B03E2 		and	r3, r3, #2048
 2382 03dc 000053E3 		cmp	r3, #0
 2383 03e0 0A00001A 		bne	.L21
  92:../sudoku_2015.c **** 				((cuadricula[filaX][columna] & 0xF000) != 0)) { 			//Si es pista lo añadimos o no es pista pero
 2384              		.loc 1 92 0 discriminator 1
 2385 03e4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2386 03e8 8332A0E1 		mov	r3, r3, asl #5
 2387 03ec 20201BE5 		ldr	r2, [fp, #-32]
 2388 03f0 032082E0 		add	r2, r2, r3
 2389 03f4 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2390 03f8 8330A0E1 		mov	r3, r3, asl #1
 2391 03fc 033082E0 		add	r3, r2, r3
 2392 0400 B030D3E1 		ldrh	r3, [r3, #0]
 2393 0404 0F3A03E2 		and	r3, r3, #61440
  91:../sudoku_2015.c **** 		if (((cuadricula[filaX][columna] & 0x0800) != 0) ||
 2394              		.loc 1 91 0 discriminator 1
 2395 0408 000053E3 		cmp	r3, #0
 2396 040c 2B00000A 		beq	.L22
 2397              	.L21:
 2398              	.LBB3:
  93:../sudoku_2015.c **** 			uint8_t valor = celda_leer_valor(cuadricula[filaX][columna]);	//Sacamos el valor
 2399              		.loc 1 93 0
 2400 0410 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2401 0414 8332A0E1 		mov	r3, r3, asl #5
 2402 0418 20201BE5 		ldr	r2, [fp, #-32]
 2403 041c 032082E0 		add	r2, r2, r3
 2404 0420 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2405 0424 8330A0E1 		mov	r3, r3, asl #1
 2406 0428 033082E0 		add	r3, r2, r3
 2407 042c B030D3E1 		ldrh	r3, [r3, #0]
 2408 0430 0300A0E1 		mov	r0, r3
 2409 0434 FEFFFFEB 		bl	celda_leer_valor
 2410 0438 0030A0E1 		mov	r3, r0
 2411 043c 16304BE5 		strb	r3, [fp, #-22]
  94:../sudoku_2015.c **** 			cuadricula[fila][columna] &= ~(1 << (valor-1));					//Ponemos el valor a 0 (no se puede poner)
 2412              		.loc 1 94 0
 2413 0440 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2414 0444 8332A0E1 		mov	r3, r3, asl #5
 2415 0448 20201BE5 		ldr	r2, [fp, #-32]
 2416 044c 031082E0 		add	r1, r2, r3
 2417 0450 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2418 0454 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2419 0458 8222A0E1 		mov	r2, r2, asl #5
 2420 045c 20001BE5 		ldr	r0, [fp, #-32]
 2421 0460 020080E0 		add	r0, r0, r2
 2422 0464 22205BE5 		ldrb	r2, [fp, #-34]	@ zero_extendqisi2
 2423 0468 8220A0E1 		mov	r2, r2, asl #1
 2424 046c 022080E0 		add	r2, r0, r2
 2425 0470 B020D2E1 		ldrh	r2, [r2, #0]
 2426 0474 0228A0E1 		mov	r2, r2, asl #16
 2427 0478 2208A0E1 		mov	r0, r2, lsr #16
 2428 047c 16205BE5 		ldrb	r2, [fp, #-22]	@ zero_extendqisi2
 2429 0480 012042E2 		sub	r2, r2, #1
 2430 0484 01C0A0E3 		mov	ip, #1
 2431 0488 1C22A0E1 		mov	r2, ip, asl r2
 2432 048c 0228A0E1 		mov	r2, r2, asl #16
 2433 0490 2228A0E1 		mov	r2, r2, lsr #16
 2434 0494 0220E0E1 		mvn	r2, r2
 2435 0498 0228A0E1 		mov	r2, r2, asl #16
 2436 049c 2228A0E1 		mov	r2, r2, lsr #16
 2437 04a0 022000E0 		and	r2, r0, r2
 2438 04a4 0228A0E1 		mov	r2, r2, asl #16
 2439 04a8 2228A0E1 		mov	r2, r2, lsr #16
 2440 04ac 0228A0E1 		mov	r2, r2, asl #16
 2441 04b0 2228A0E1 		mov	r2, r2, lsr #16
 2442 04b4 8330A0E1 		mov	r3, r3, asl #1
 2443 04b8 033081E0 		add	r3, r1, r3
 2444 04bc B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2445              	.L22:
 2446              	.LBE3:
  95:../sudoku_2015.c **** 		}
  96:../sudoku_2015.c **** 		filaX++;
 2447              		.loc 1 96 0
 2448 04c0 0D305BE5 		ldrb	r3, [fp, #-13]
 2449 04c4 013083E2 		add	r3, r3, #1
 2450 04c8 0D304BE5 		strb	r3, [fp, #-13]
 2451              	.L20:
  90:../sudoku_2015.c **** 	while(filaX<9){
 2452              		.loc 1 90 0 discriminator 1
 2453 04cc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2454 04d0 080053E3 		cmp	r3, #8
 2455 04d4 B7FFFF9A 		bls	.L23
  97:../sudoku_2015.c **** 	}
  98:../sudoku_2015.c **** 	//recorrer region recalculando candidatos
  99:../sudoku_2015.c **** 	uint8_t fInicio = fila - (fila%3);       //Se posiciona en la primera posicion del cuadrante y se 
 2456              		.loc 1 99 0
 2457 04d8 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2458 04dc 38329FE5 		ldr	r3, .L32
 2459 04e0 921383E0 		umull	r1, r3, r2, r3
 2460 04e4 A310A0E1 		mov	r1, r3, lsr #1
 2461 04e8 0130A0E1 		mov	r3, r1
 2462 04ec 8330A0E1 		mov	r3, r3, asl #1
 2463 04f0 013083E0 		add	r3, r3, r1
 2464 04f4 023063E0 		rsb	r3, r3, r2
 2465 04f8 FF3003E2 		and	r3, r3, #255
 2466 04fc 21205BE5 		ldrb	r2, [fp, #-33]
 2467 0500 023063E0 		rsb	r3, r3, r2
 2468 0504 17304BE5 		strb	r3, [fp, #-23]
 100:../sudoku_2015.c **** 	uint8_t cInicio = columna;
 2469              		.loc 1 100 0
 2470 0508 22305BE5 		ldrb	r3, [fp, #-34]
 2471 050c 18304BE5 		strb	r3, [fp, #-24]
 101:../sudoku_2015.c **** 	cInicio = cInicio - (columna%3);
 2472              		.loc 1 101 0
 2473 0510 22205BE5 		ldrb	r2, [fp, #-34]	@ zero_extendqisi2
 2474 0514 00329FE5 		ldr	r3, .L32
 2475 0518 921383E0 		umull	r1, r3, r2, r3
 2476 051c A310A0E1 		mov	r1, r3, lsr #1
 2477 0520 0130A0E1 		mov	r3, r1
 2478 0524 8330A0E1 		mov	r3, r3, asl #1
 2479 0528 013083E0 		add	r3, r3, r1
 2480 052c 023063E0 		rsb	r3, r3, r2
 2481 0530 FF3003E2 		and	r3, r3, #255
 2482 0534 18205BE5 		ldrb	r2, [fp, #-24]
 2483 0538 023063E0 		rsb	r3, r3, r2
 2484 053c 18304BE5 		strb	r3, [fp, #-24]
 102:../sudoku_2015.c **** 	filaX=fInicio; columnaX=cInicio;
 2485              		.loc 1 102 0
 2486 0540 17305BE5 		ldrb	r3, [fp, #-23]
 2487 0544 0D304BE5 		strb	r3, [fp, #-13]
 2488 0548 18305BE5 		ldrb	r3, [fp, #-24]
 2489 054c 0E304BE5 		strb	r3, [fp, #-14]
 103:../sudoku_2015.c **** 	int i = 0;
 2490              		.loc 1 103 0
 2491 0550 0030A0E3 		mov	r3, #0
 2492 0554 14300BE5 		str	r3, [fp, #-20]
 104:../sudoku_2015.c **** 	while(i<9){
 2493              		.loc 1 104 0
 2494 0558 5A0000EA 		b	.L24
 2495              	.L29:
 105:../sudoku_2015.c **** 		if(filaX!=fila && columnaX!=columna){
 2496              		.loc 1 105 0
 2497 055c 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 2498 0560 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2499 0564 030052E1 		cmp	r2, r3
 2500 0568 4500000A 		beq	.L25
 2501              		.loc 1 105 0 is_stmt 0 discriminator 1
 2502 056c 0E205BE5 		ldrb	r2, [fp, #-14]	@ zero_extendqisi2
 2503 0570 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2504 0574 030052E1 		cmp	r2, r3
 2505 0578 4100000A 		beq	.L25
 106:../sudoku_2015.c **** 			if (((cuadricula[filaX][columnaX] & 0x0800) != 0) ||
 2506              		.loc 1 106 0 is_stmt 1
 2507 057c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2508 0580 8332A0E1 		mov	r3, r3, asl #5
 2509 0584 20201BE5 		ldr	r2, [fp, #-32]
 2510 0588 032082E0 		add	r2, r2, r3
 2511 058c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2512 0590 8330A0E1 		mov	r3, r3, asl #1
 2513 0594 033082E0 		add	r3, r2, r3
 2514 0598 B030D3E1 		ldrh	r3, [r3, #0]
 2515 059c 023B03E2 		and	r3, r3, #2048
 2516 05a0 000053E3 		cmp	r3, #0
 2517 05a4 0A00001A 		bne	.L26
 107:../sudoku_2015.c **** 					((cuadricula[filaX][columnaX] & 0xF000) != 0)) { 			//Si es pista lo añadimos o no es pista pe
 2518              		.loc 1 107 0 discriminator 1
 2519 05a8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2520 05ac 8332A0E1 		mov	r3, r3, asl #5
 2521 05b0 20201BE5 		ldr	r2, [fp, #-32]
 2522 05b4 032082E0 		add	r2, r2, r3
 2523 05b8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2524 05bc 8330A0E1 		mov	r3, r3, asl #1
 2525 05c0 033082E0 		add	r3, r2, r3
 2526 05c4 B030D3E1 		ldrh	r3, [r3, #0]
 2527 05c8 0F3A03E2 		and	r3, r3, #61440
 106:../sudoku_2015.c **** 			if (((cuadricula[filaX][columnaX] & 0x0800) != 0) ||
 2528              		.loc 1 106 0 discriminator 1
 2529 05cc 000053E3 		cmp	r3, #0
 2530 05d0 2B00000A 		beq	.L25
 2531              	.L26:
 2532              	.LBB4:
 108:../sudoku_2015.c **** 				uint8_t valor = celda_leer_valor(cuadricula[filaX][columnaX]);	//Sacamos el valor
 2533              		.loc 1 108 0
 2534 05d4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2535 05d8 8332A0E1 		mov	r3, r3, asl #5
 2536 05dc 20201BE5 		ldr	r2, [fp, #-32]
 2537 05e0 032082E0 		add	r2, r2, r3
 2538 05e4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2539 05e8 8330A0E1 		mov	r3, r3, asl #1
 2540 05ec 033082E0 		add	r3, r2, r3
 2541 05f0 B030D3E1 		ldrh	r3, [r3, #0]
 2542 05f4 0300A0E1 		mov	r0, r3
 2543 05f8 FEFFFFEB 		bl	celda_leer_valor
 2544 05fc 0030A0E1 		mov	r3, r0
 2545 0600 19304BE5 		strb	r3, [fp, #-25]
 109:../sudoku_2015.c **** 				cuadricula[fila][columna] &= ~(1 << (valor-1));					//Ponemos el valor a 0 (no se puede poner)
 2546              		.loc 1 109 0
 2547 0604 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2548 0608 8332A0E1 		mov	r3, r3, asl #5
 2549 060c 20201BE5 		ldr	r2, [fp, #-32]
 2550 0610 031082E0 		add	r1, r2, r3
 2551 0614 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2552 0618 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2553 061c 8222A0E1 		mov	r2, r2, asl #5
 2554 0620 20001BE5 		ldr	r0, [fp, #-32]
 2555 0624 020080E0 		add	r0, r0, r2
 2556 0628 22205BE5 		ldrb	r2, [fp, #-34]	@ zero_extendqisi2
 2557 062c 8220A0E1 		mov	r2, r2, asl #1
 2558 0630 022080E0 		add	r2, r0, r2
 2559 0634 B020D2E1 		ldrh	r2, [r2, #0]
 2560 0638 0228A0E1 		mov	r2, r2, asl #16
 2561 063c 2208A0E1 		mov	r0, r2, lsr #16
 2562 0640 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2563 0644 012042E2 		sub	r2, r2, #1
 2564 0648 01C0A0E3 		mov	ip, #1
 2565 064c 1C22A0E1 		mov	r2, ip, asl r2
 2566 0650 0228A0E1 		mov	r2, r2, asl #16
 2567 0654 2228A0E1 		mov	r2, r2, lsr #16
 2568 0658 0220E0E1 		mvn	r2, r2
 2569 065c 0228A0E1 		mov	r2, r2, asl #16
 2570 0660 2228A0E1 		mov	r2, r2, lsr #16
 2571 0664 022000E0 		and	r2, r0, r2
 2572 0668 0228A0E1 		mov	r2, r2, asl #16
 2573 066c 2228A0E1 		mov	r2, r2, lsr #16
 2574 0670 0228A0E1 		mov	r2, r2, asl #16
 2575 0674 2228A0E1 		mov	r2, r2, lsr #16
 2576 0678 8330A0E1 		mov	r3, r3, asl #1
 2577 067c 033081E0 		add	r3, r1, r3
 2578 0680 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2579              	.L25:
 2580              	.LBE4:
 110:../sudoku_2015.c **** 			}
 111:../sudoku_2015.c **** 		}
 112:../sudoku_2015.c **** 		if(filaX==fInicio+2){	//Avanzamos por el sudoku
 2581              		.loc 1 112 0
 2582 0684 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 2583 0688 17305BE5 		ldrb	r3, [fp, #-23]	@ zero_extendqisi2
 2584 068c 023083E2 		add	r3, r3, #2
 2585 0690 030052E1 		cmp	r2, r3
 2586 0694 0500001A 		bne	.L27
 113:../sudoku_2015.c **** 			filaX=fInicio;
 2587              		.loc 1 113 0
 2588 0698 17305BE5 		ldrb	r3, [fp, #-23]
 2589 069c 0D304BE5 		strb	r3, [fp, #-13]
 114:../sudoku_2015.c **** 			columnaX++;
 2590              		.loc 1 114 0
 2591 06a0 0E305BE5 		ldrb	r3, [fp, #-14]
 2592 06a4 013083E2 		add	r3, r3, #1
 2593 06a8 0E304BE5 		strb	r3, [fp, #-14]
 2594 06ac 020000EA 		b	.L28
 2595              	.L27:
 115:../sudoku_2015.c **** 		}else{
 116:../sudoku_2015.c **** 			filaX++;
 2596              		.loc 1 116 0
 2597 06b0 0D305BE5 		ldrb	r3, [fp, #-13]
 2598 06b4 013083E2 		add	r3, r3, #1
 2599 06b8 0D304BE5 		strb	r3, [fp, #-13]
 2600              	.L28:
 117:../sudoku_2015.c **** 		}
 118:../sudoku_2015.c **** 		i++;
 2601              		.loc 1 118 0
 2602 06bc 14301BE5 		ldr	r3, [fp, #-20]
 2603 06c0 013083E2 		add	r3, r3, #1
 2604 06c4 14300BE5 		str	r3, [fp, #-20]
 2605              	.L24:
 104:../sudoku_2015.c **** 	while(i<9){
 2606              		.loc 1 104 0 discriminator 1
 2607 06c8 14301BE5 		ldr	r3, [fp, #-20]
 2608 06cc 080053E3 		cmp	r3, #8
 2609 06d0 A1FFFFDA 		ble	.L29
 119:../sudoku_2015.c **** 	}
 120:../sudoku_2015.c **** 	
 121:../sudoku_2015.c **** 	//retornar indicando si la celda tiene un valor o esta vacia
 122:../sudoku_2015.c **** 	if ((cuadricula[fila][columna] & 0xF000) != 0) return TRUE;
 2610              		.loc 1 122 0
 2611 06d4 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2612 06d8 8332A0E1 		mov	r3, r3, asl #5
 2613 06dc 20201BE5 		ldr	r2, [fp, #-32]
 2614 06e0 032082E0 		add	r2, r2, r3
 2615 06e4 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 2616 06e8 8330A0E1 		mov	r3, r3, asl #1
 2617 06ec 033082E0 		add	r3, r2, r3
 2618 06f0 B030D3E1 		ldrh	r3, [r3, #0]
 2619 06f4 0F3A03E2 		and	r3, r3, #61440
 2620 06f8 000053E3 		cmp	r3, #0
 2621 06fc 0100000A 		beq	.L30
 2622              		.loc 1 122 0 is_stmt 0 discriminator 1
 2623 0700 0130A0E3 		mov	r3, #1
 2624 0704 000000EA 		b	.L31
 2625              	.L30:
 123:../sudoku_2015.c **** 	return FALSE;
 2626              		.loc 1 123 0 is_stmt 1
 2627 0708 0030A0E3 		mov	r3, #0
 2628              	.L31:
 124:../sudoku_2015.c **** }
 2629              		.loc 1 124 0
 2630 070c 0300A0E1 		mov	r0, r3
 2631 0710 0CD04BE2 		sub	sp, fp, #12
 2632 0714 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2633 0718 1EFF2FE1 		bx	lr
 2634              	.L33:
 2635              		.align	2
 2636              	.L32:
 2637 071c ABAAAAAA 		.word	-1431655765
 2638              		.cfi_endproc
 2639              	.LFE6:
 2641              		.align	2
 2642              		.global	sudoku_recalcular_c
 2644              	sudoku_recalcular_c:
 2645              	.LFB7:
 125:../sudoku_2015.c **** 
 126:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 127:../sudoku_2015.c **** // recalcula todo el tablero (9x9) buscando candidatos con C
 128:../sudoku_2015.c **** // retorna el numero de celdas vacias
 129:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 130:../sudoku_2015.c **** int sudoku_recalcular_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]) {
 2646              		.loc 1 130 0
 2647              		.cfi_startproc
 2648              		@ Function supports interworking.
 2649              		@ args = 0, pretend = 0, frame = 24
 2650              		@ frame_needed = 1, uses_anonymous_args = 0
 2651 0720 0DC0A0E1 		mov	ip, sp
 2652              	.LCFI14:
 2653              		.cfi_def_cfa_register 12
 2654 0724 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2655 0728 04B04CE2 		sub	fp, ip, #4
 2656              		.cfi_offset 14, -8
 2657              		.cfi_offset 13, -12
 2658              		.cfi_offset 11, -16
 2659              	.LCFI15:
 2660              		.cfi_def_cfa 11, 4
 2661 072c 18D04DE2 		sub	sp, sp, #24
 2662 0730 20000BE5 		str	r0, [fp, #-32]
 131:../sudoku_2015.c **** 	int celdasVacias = 0;
 2663              		.loc 1 131 0
 2664 0734 0030A0E3 		mov	r3, #0
 2665 0738 10300BE5 		str	r3, [fp, #-16]
 132:../sudoku_2015.c **** 	int i;
 133:../sudoku_2015.c **** 	int j;
 134:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2666              		.loc 1 134 0
 2667 073c 0030A0E3 		mov	r3, #0
 2668 0740 14300BE5 		str	r3, [fp, #-20]
 2669 0744 240000EA 		b	.L35
 2670              	.L39:
 135:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2671              		.loc 1 135 0
 2672 0748 0030A0E3 		mov	r3, #0
 2673 074c 18300BE5 		str	r3, [fp, #-24]
 2674 0750 1B0000EA 		b	.L36
 2675              	.L38:
 136:../sudoku_2015.c **** 			if(((cuadricula[i][j] & 0x0800) == 0) && !sudoku_candidatos_c(cuadricula,i,j)){ //determinar can
 2676              		.loc 1 136 0
 2677 0754 14301BE5 		ldr	r3, [fp, #-20]
 2678 0758 8332A0E1 		mov	r3, r3, asl #5
 2679 075c 20201BE5 		ldr	r2, [fp, #-32]
 2680 0760 032082E0 		add	r2, r2, r3
 2681 0764 18301BE5 		ldr	r3, [fp, #-24]
 2682 0768 8330A0E1 		mov	r3, r3, asl #1
 2683 076c 033082E0 		add	r3, r2, r3
 2684 0770 B030D3E1 		ldrh	r3, [r3, #0]
 2685 0774 023B03E2 		and	r3, r3, #2048
 2686 0778 000053E3 		cmp	r3, #0
 2687 077c 0D00001A 		bne	.L37
 2688              		.loc 1 136 0 is_stmt 0 discriminator 1
 2689 0780 14301BE5 		ldr	r3, [fp, #-20]
 2690 0784 FF2003E2 		and	r2, r3, #255
 2691 0788 18301BE5 		ldr	r3, [fp, #-24]
 2692 078c FF3003E2 		and	r3, r3, #255
 2693 0790 20001BE5 		ldr	r0, [fp, #-32]
 2694 0794 0210A0E1 		mov	r1, r2
 2695 0798 0320A0E1 		mov	r2, r3
 2696 079c FEFFFFEB 		bl	sudoku_candidatos_c
 2697 07a0 0030A0E1 		mov	r3, r0
 2698 07a4 000053E3 		cmp	r3, #0
 2699 07a8 0200001A 		bne	.L37
 137:../sudoku_2015.c **** 				celdasVacias++; //actualizar contador de celdas vacias
 2700              		.loc 1 137 0 is_stmt 1
 2701 07ac 10301BE5 		ldr	r3, [fp, #-16]
 2702 07b0 013083E2 		add	r3, r3, #1
 2703 07b4 10300BE5 		str	r3, [fp, #-16]
 2704              	.L37:
 135:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2705              		.loc 1 135 0
 2706 07b8 18301BE5 		ldr	r3, [fp, #-24]
 2707 07bc 013083E2 		add	r3, r3, #1
 2708 07c0 18300BE5 		str	r3, [fp, #-24]
 2709              	.L36:
 135:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2710              		.loc 1 135 0 is_stmt 0 discriminator 1
 2711 07c4 18301BE5 		ldr	r3, [fp, #-24]
 2712 07c8 080053E3 		cmp	r3, #8
 2713 07cc E0FFFFDA 		ble	.L38
 134:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2714              		.loc 1 134 0 is_stmt 1
 2715 07d0 14301BE5 		ldr	r3, [fp, #-20]
 2716 07d4 013083E2 		add	r3, r3, #1
 2717 07d8 14300BE5 		str	r3, [fp, #-20]
 2718              	.L35:
 134:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2719              		.loc 1 134 0 is_stmt 0 discriminator 1
 2720 07dc 14301BE5 		ldr	r3, [fp, #-20]
 2721 07e0 080053E3 		cmp	r3, #8
 2722 07e4 D7FFFFDA 		ble	.L39
 138:../sudoku_2015.c **** 			}
 139:../sudoku_2015.c **** 		}
 140:../sudoku_2015.c **** 	}
 141:../sudoku_2015.c **** 	return celdasVacias; //retornar el numero de celdas vacias
 2723              		.loc 1 141 0 is_stmt 1
 2724 07e8 10301BE5 		ldr	r3, [fp, #-16]
 142:../sudoku_2015.c **** }
 2725              		.loc 1 142 0
 2726 07ec 0300A0E1 		mov	r0, r3
 2727 07f0 0CD04BE2 		sub	sp, fp, #12
 2728 07f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2729 07f8 1EFF2FE1 		bx	lr
 2730              		.cfi_endproc
 2731              	.LFE7:
 2733              		.align	2
 2734              		.global	sudoku_recalcular_c_arm
 2736              	sudoku_recalcular_c_arm:
 2737              	.LFB8:
 143:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 144:../sudoku_2015.c **** // recalcula todo el tablero (9x9) buscando candidatos con ARM
 145:../sudoku_2015.c **** // retorna el numero de celdas vacias
 146:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 147:../sudoku_2015.c **** int sudoku_recalcular_c_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]) {
 2738              		.loc 1 147 0
 2739              		.cfi_startproc
 2740              		@ Function supports interworking.
 2741              		@ args = 0, pretend = 0, frame = 24
 2742              		@ frame_needed = 1, uses_anonymous_args = 0
 2743 07fc 0DC0A0E1 		mov	ip, sp
 2744              	.LCFI16:
 2745              		.cfi_def_cfa_register 12
 2746 0800 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2747 0804 04B04CE2 		sub	fp, ip, #4
 2748              		.cfi_offset 14, -8
 2749              		.cfi_offset 13, -12
 2750              		.cfi_offset 11, -16
 2751              	.LCFI17:
 2752              		.cfi_def_cfa 11, 4
 2753 0808 18D04DE2 		sub	sp, sp, #24
 2754 080c 20000BE5 		str	r0, [fp, #-32]
 148:../sudoku_2015.c **** 	int celdasVacias = 0;
 2755              		.loc 1 148 0
 2756 0810 0030A0E3 		mov	r3, #0
 2757 0814 10300BE5 		str	r3, [fp, #-16]
 149:../sudoku_2015.c **** 	int i;
 150:../sudoku_2015.c **** 	int j;
 151:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2758              		.loc 1 151 0
 2759 0818 0030A0E3 		mov	r3, #0
 2760 081c 14300BE5 		str	r3, [fp, #-20]
 2761 0820 200000EA 		b	.L41
 2762              	.L45:
 152:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2763              		.loc 1 152 0
 2764 0824 0030A0E3 		mov	r3, #0
 2765 0828 18300BE5 		str	r3, [fp, #-24]
 2766 082c 170000EA 		b	.L42
 2767              	.L44:
 153:../sudoku_2015.c **** 			if(((cuadricula[i][j] & 0x0800) == 0) && !sudoku_candidatos_arm(cuadricula,i,j)){ //determinar c
 2768              		.loc 1 153 0
 2769 0830 14301BE5 		ldr	r3, [fp, #-20]
 2770 0834 8332A0E1 		mov	r3, r3, asl #5
 2771 0838 20201BE5 		ldr	r2, [fp, #-32]
 2772 083c 032082E0 		add	r2, r2, r3
 2773 0840 18301BE5 		ldr	r3, [fp, #-24]
 2774 0844 8330A0E1 		mov	r3, r3, asl #1
 2775 0848 033082E0 		add	r3, r2, r3
 2776 084c B030D3E1 		ldrh	r3, [r3, #0]
 2777 0850 023B03E2 		and	r3, r3, #2048
 2778 0854 000053E3 		cmp	r3, #0
 2779 0858 0900001A 		bne	.L43
 2780              		.loc 1 153 0 is_stmt 0 discriminator 1
 2781 085c 20001BE5 		ldr	r0, [fp, #-32]
 2782 0860 14101BE5 		ldr	r1, [fp, #-20]
 2783 0864 18201BE5 		ldr	r2, [fp, #-24]
 2784 0868 FEFFFFEB 		bl	sudoku_candidatos_arm
 2785 086c 0030A0E1 		mov	r3, r0
 2786 0870 000053E3 		cmp	r3, #0
 2787 0874 0200001A 		bne	.L43
 154:../sudoku_2015.c **** 				celdasVacias++; //actualizar contador de celdas vacias
 2788              		.loc 1 154 0 is_stmt 1
 2789 0878 10301BE5 		ldr	r3, [fp, #-16]
 2790 087c 013083E2 		add	r3, r3, #1
 2791 0880 10300BE5 		str	r3, [fp, #-16]
 2792              	.L43:
 152:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2793              		.loc 1 152 0
 2794 0884 18301BE5 		ldr	r3, [fp, #-24]
 2795 0888 013083E2 		add	r3, r3, #1
 2796 088c 18300BE5 		str	r3, [fp, #-24]
 2797              	.L42:
 152:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2798              		.loc 1 152 0 is_stmt 0 discriminator 1
 2799 0890 18301BE5 		ldr	r3, [fp, #-24]
 2800 0894 080053E3 		cmp	r3, #8
 2801 0898 E4FFFFDA 		ble	.L44
 151:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2802              		.loc 1 151 0 is_stmt 1
 2803 089c 14301BE5 		ldr	r3, [fp, #-20]
 2804 08a0 013083E2 		add	r3, r3, #1
 2805 08a4 14300BE5 		str	r3, [fp, #-20]
 2806              	.L41:
 151:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2807              		.loc 1 151 0 is_stmt 0 discriminator 1
 2808 08a8 14301BE5 		ldr	r3, [fp, #-20]
 2809 08ac 080053E3 		cmp	r3, #8
 2810 08b0 DBFFFFDA 		ble	.L45
 155:../sudoku_2015.c **** 			}
 156:../sudoku_2015.c **** 		}
 157:../sudoku_2015.c **** 	}
 158:../sudoku_2015.c **** 	return celdasVacias; //retornar el numero de celdas vacias
 2811              		.loc 1 158 0 is_stmt 1
 2812 08b4 10301BE5 		ldr	r3, [fp, #-16]
 159:../sudoku_2015.c **** }
 2813              		.loc 1 159 0
 2814 08b8 0300A0E1 		mov	r0, r3
 2815 08bc 0CD04BE2 		sub	sp, fp, #12
 2816 08c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2817 08c4 1EFF2FE1 		bx	lr
 2818              		.cfi_endproc
 2819              	.LFE8:
 2821              		.align	2
 2822              		.global	sudoku_recalcular_c_thumb
 2824              	sudoku_recalcular_c_thumb:
 2825              	.LFB9:
 160:../sudoku_2015.c **** 
 161:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 162:../sudoku_2015.c **** // recalcula todo el tablero (9x9) buscando candidatos con THUMB
 163:../sudoku_2015.c **** // retorna el numero de celdas vacias
 164:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 165:../sudoku_2015.c **** int sudoku_recalcular_c_thumb(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]) {
 2826              		.loc 1 165 0
 2827              		.cfi_startproc
 2828              		@ Function supports interworking.
 2829              		@ args = 0, pretend = 0, frame = 24
 2830              		@ frame_needed = 1, uses_anonymous_args = 0
 2831 08c8 0DC0A0E1 		mov	ip, sp
 2832              	.LCFI18:
 2833              		.cfi_def_cfa_register 12
 2834 08cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2835 08d0 04B04CE2 		sub	fp, ip, #4
 2836              		.cfi_offset 14, -8
 2837              		.cfi_offset 13, -12
 2838              		.cfi_offset 11, -16
 2839              	.LCFI19:
 2840              		.cfi_def_cfa 11, 4
 2841 08d4 18D04DE2 		sub	sp, sp, #24
 2842 08d8 20000BE5 		str	r0, [fp, #-32]
 166:../sudoku_2015.c **** 	int celdasVacias = 0;
 2843              		.loc 1 166 0
 2844 08dc 0030A0E3 		mov	r3, #0
 2845 08e0 10300BE5 		str	r3, [fp, #-16]
 167:../sudoku_2015.c **** 	int i;
 168:../sudoku_2015.c **** 	int j;
 169:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2846              		.loc 1 169 0
 2847 08e4 0030A0E3 		mov	r3, #0
 2848 08e8 14300BE5 		str	r3, [fp, #-20]
 2849 08ec 200000EA 		b	.L47
 2850              	.L51:
 170:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2851              		.loc 1 170 0
 2852 08f0 0030A0E3 		mov	r3, #0
 2853 08f4 18300BE5 		str	r3, [fp, #-24]
 2854 08f8 170000EA 		b	.L48
 2855              	.L50:
 171:../sudoku_2015.c **** 			if(((cuadricula[i][j] & 0x0800) == 0) && !sudoku_candidatos_thumb(cuadricula,i,j)){ //determinar
 2856              		.loc 1 171 0
 2857 08fc 14301BE5 		ldr	r3, [fp, #-20]
 2858 0900 8332A0E1 		mov	r3, r3, asl #5
 2859 0904 20201BE5 		ldr	r2, [fp, #-32]
 2860 0908 032082E0 		add	r2, r2, r3
 2861 090c 18301BE5 		ldr	r3, [fp, #-24]
 2862 0910 8330A0E1 		mov	r3, r3, asl #1
 2863 0914 033082E0 		add	r3, r2, r3
 2864 0918 B030D3E1 		ldrh	r3, [r3, #0]
 2865 091c 023B03E2 		and	r3, r3, #2048
 2866 0920 000053E3 		cmp	r3, #0
 2867 0924 0900001A 		bne	.L49
 2868              		.loc 1 171 0 is_stmt 0 discriminator 1
 2869 0928 20001BE5 		ldr	r0, [fp, #-32]
 2870 092c 14101BE5 		ldr	r1, [fp, #-20]
 2871 0930 18201BE5 		ldr	r2, [fp, #-24]
 2872 0934 FEFFFFEB 		bl	sudoku_candidatos_thumb
 2873 0938 0030A0E1 		mov	r3, r0
 2874 093c 000053E3 		cmp	r3, #0
 2875 0940 0200001A 		bne	.L49
 172:../sudoku_2015.c **** 							celdasVacias++; //actualizar contador de celdas vacias
 2876              		.loc 1 172 0 is_stmt 1
 2877 0944 10301BE5 		ldr	r3, [fp, #-16]
 2878 0948 013083E2 		add	r3, r3, #1
 2879 094c 10300BE5 		str	r3, [fp, #-16]
 2880              	.L49:
 170:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2881              		.loc 1 170 0
 2882 0950 18301BE5 		ldr	r3, [fp, #-24]
 2883 0954 013083E2 		add	r3, r3, #1
 2884 0958 18300BE5 		str	r3, [fp, #-24]
 2885              	.L48:
 170:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++){ //para cada columna
 2886              		.loc 1 170 0 is_stmt 0 discriminator 1
 2887 095c 18301BE5 		ldr	r3, [fp, #-24]
 2888 0960 080053E3 		cmp	r3, #8
 2889 0964 E4FFFFDA 		ble	.L50
 169:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2890              		.loc 1 169 0 is_stmt 1
 2891 0968 14301BE5 		ldr	r3, [fp, #-20]
 2892 096c 013083E2 		add	r3, r3, #1
 2893 0970 14300BE5 		str	r3, [fp, #-20]
 2894              	.L47:
 169:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++){ 	//para cada fila
 2895              		.loc 1 169 0 is_stmt 0 discriminator 1
 2896 0974 14301BE5 		ldr	r3, [fp, #-20]
 2897 0978 080053E3 		cmp	r3, #8
 2898 097c DBFFFFDA 		ble	.L51
 173:../sudoku_2015.c **** 			}
 174:../sudoku_2015.c **** 		}
 175:../sudoku_2015.c **** 	}
 176:../sudoku_2015.c **** 	return celdasVacias; //retornar el numero de celdas vacias
 2899              		.loc 1 176 0 is_stmt 1
 2900 0980 10301BE5 		ldr	r3, [fp, #-16]
 177:../sudoku_2015.c **** }
 2901              		.loc 1 177 0
 2902 0984 0300A0E1 		mov	r0, r3
 2903 0988 0CD04BE2 		sub	sp, fp, #12
 2904 098c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2905 0990 1EFF2FE1 		bx	lr
 2906              		.cfi_endproc
 2907              	.LFE9:
 2909              		.align	2
 2910              		.global	validar
 2912              	validar:
 2913              	.LFB10:
 178:../sudoku_2015.c **** 
 179:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 180:../sudoku_2015.c **** // valida un tablero (9x9) comparandolo con otro cuyos resultados son correctos
 181:../sudoku_2015.c **** //retorna 1 si y solo si son iguales, 0 en caso contrario
 182:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 183:../sudoku_2015.c **** int validar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], CELDA resultado_C[NUM_FILAS][NUM_COLUMNAS]) 
 2914              		.loc 1 183 0
 2915              		.cfi_startproc
 2916              		@ Function supports interworking.
 2917              		@ args = 0, pretend = 0, frame = 24
 2918              		@ frame_needed = 1, uses_anonymous_args = 0
 2919 0994 0DC0A0E1 		mov	ip, sp
 2920              	.LCFI20:
 2921              		.cfi_def_cfa_register 12
 2922 0998 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2923 099c 04B04CE2 		sub	fp, ip, #4
 2924              		.cfi_offset 14, -8
 2925              		.cfi_offset 13, -12
 2926              		.cfi_offset 11, -16
 2927              	.LCFI21:
 2928              		.cfi_def_cfa 11, 4
 2929 09a0 18D04DE2 		sub	sp, sp, #24
 2930 09a4 20000BE5 		str	r0, [fp, #-32]
 2931 09a8 24100BE5 		str	r1, [fp, #-36]
 184:../sudoku_2015.c **** 	int i,j,iguales=TRUE;
 2932              		.loc 1 184 0
 2933 09ac 0130A0E3 		mov	r3, #1
 2934 09b0 18300BE5 		str	r3, [fp, #-24]
 185:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 2935              		.loc 1 185 0
 2936 09b4 0030A0E3 		mov	r3, #0
 2937 09b8 10300BE5 		str	r3, [fp, #-16]
 2938 09bc 210000EA 		b	.L53
 2939              	.L58:
 186:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS;j++) {
 2940              		.loc 1 186 0
 2941 09c0 0030A0E3 		mov	r3, #0
 2942 09c4 14300BE5 		str	r3, [fp, #-20]
 2943 09c8 180000EA 		b	.L54
 2944              	.L57:
 187:../sudoku_2015.c **** 			if(cuadricula[i][j]!=resultado_C[i][j]){
 2945              		.loc 1 187 0
 2946 09cc 10301BE5 		ldr	r3, [fp, #-16]
 2947 09d0 8332A0E1 		mov	r3, r3, asl #5
 2948 09d4 20201BE5 		ldr	r2, [fp, #-32]
 2949 09d8 032082E0 		add	r2, r2, r3
 2950 09dc 14301BE5 		ldr	r3, [fp, #-20]
 2951 09e0 8330A0E1 		mov	r3, r3, asl #1
 2952 09e4 033082E0 		add	r3, r2, r3
 2953 09e8 B020D3E1 		ldrh	r2, [r3, #0]
 2954 09ec 10301BE5 		ldr	r3, [fp, #-16]
 2955 09f0 8332A0E1 		mov	r3, r3, asl #5
 2956 09f4 24101BE5 		ldr	r1, [fp, #-36]
 2957 09f8 031081E0 		add	r1, r1, r3
 2958 09fc 14301BE5 		ldr	r3, [fp, #-20]
 2959 0a00 8330A0E1 		mov	r3, r3, asl #1
 2960 0a04 033081E0 		add	r3, r1, r3
 2961 0a08 B030D3E1 		ldrh	r3, [r3, #0]
 2962 0a0c 030052E1 		cmp	r2, r3
 2963 0a10 0300000A 		beq	.L55
 188:../sudoku_2015.c **** 				iguales = FALSE;
 2964              		.loc 1 188 0
 2965 0a14 0030A0E3 		mov	r3, #0
 2966 0a18 18300BE5 		str	r3, [fp, #-24]
 189:../sudoku_2015.c **** 				return iguales;
 2967              		.loc 1 189 0
 2968 0a1c 18301BE5 		ldr	r3, [fp, #-24]
 2969 0a20 0C0000EA 		b	.L56
 2970              	.L55:
 186:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS;j++) {
 2971              		.loc 1 186 0
 2972 0a24 14301BE5 		ldr	r3, [fp, #-20]
 2973 0a28 013083E2 		add	r3, r3, #1
 2974 0a2c 14300BE5 		str	r3, [fp, #-20]
 2975              	.L54:
 186:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS;j++) {
 2976              		.loc 1 186 0 is_stmt 0 discriminator 1
 2977 0a30 14301BE5 		ldr	r3, [fp, #-20]
 2978 0a34 0F0053E3 		cmp	r3, #15
 2979 0a38 E3FFFFDA 		ble	.L57
 185:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 2980              		.loc 1 185 0 is_stmt 1
 2981 0a3c 10301BE5 		ldr	r3, [fp, #-16]
 2982 0a40 013083E2 		add	r3, r3, #1
 2983 0a44 10300BE5 		str	r3, [fp, #-16]
 2984              	.L53:
 185:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 2985              		.loc 1 185 0 is_stmt 0 discriminator 1
 2986 0a48 10301BE5 		ldr	r3, [fp, #-16]
 2987 0a4c 080053E3 		cmp	r3, #8
 2988 0a50 DAFFFFDA 		ble	.L58
 190:../sudoku_2015.c **** 			}
 191:../sudoku_2015.c **** 		}
 192:../sudoku_2015.c **** 	}
 193:../sudoku_2015.c **** 	return iguales;
 2989              		.loc 1 193 0 is_stmt 1
 2990 0a54 18301BE5 		ldr	r3, [fp, #-24]
 2991              	.L56:
 194:../sudoku_2015.c **** }
 2992              		.loc 1 194 0
 2993 0a58 0300A0E1 		mov	r0, r3
 2994 0a5c 0CD04BE2 		sub	sp, fp, #12
 2995 0a60 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2996 0a64 1EFF2FE1 		bx	lr
 2997              		.cfi_endproc
 2998              	.LFE10:
 3000              		.align	2
 3001              		.global	reiniciar_tablero
 3003              	reiniciar_tablero:
 3004              	.LFB11:
 195:../sudoku_2015.c **** 
 196:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 197:../sudoku_2015.c **** // Reinicia un tablero (9x9) al tablero por inicial
 198:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 199:../sudoku_2015.c **** void reiniciar_tablero(CELDA tablero [NUM_FILAS][NUM_COLUMNAS]) {
 3005              		.loc 1 199 0
 3006              		.cfi_startproc
 3007              		@ Function supports interworking.
 3008              		@ args = 0, pretend = 0, frame = 16
 3009              		@ frame_needed = 1, uses_anonymous_args = 0
 3010 0a68 0DC0A0E1 		mov	ip, sp
 3011              	.LCFI22:
 3012              		.cfi_def_cfa_register 12
 3013 0a6c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3014 0a70 04B04CE2 		sub	fp, ip, #4
 3015              		.cfi_offset 14, -8
 3016              		.cfi_offset 13, -12
 3017              		.cfi_offset 11, -16
 3018              	.LCFI23:
 3019              		.cfi_def_cfa 11, 4
 3020 0a74 10D04DE2 		sub	sp, sp, #16
 3021 0a78 18000BE5 		str	r0, [fp, #-24]
 200:../sudoku_2015.c **** 	int i,j;
 201:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 3022              		.loc 1 201 0
 3023 0a7c 0030A0E3 		mov	r3, #0
 3024 0a80 10300BE5 		str	r3, [fp, #-16]
 3025 0a84 1B0000EA 		b	.L60
 3026              	.L63:
 202:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++) {
 3027              		.loc 1 202 0
 3028 0a88 0030A0E3 		mov	r3, #0
 3029 0a8c 14300BE5 		str	r3, [fp, #-20]
 3030 0a90 120000EA 		b	.L61
 3031              	.L62:
 203:../sudoku_2015.c **** 			tablero[i][j] = cOriginal[i][j];
 3032              		.loc 1 203 0 discriminator 2
 3033 0a94 10301BE5 		ldr	r3, [fp, #-16]
 3034 0a98 8332A0E1 		mov	r3, r3, asl #5
 3035 0a9c 18201BE5 		ldr	r2, [fp, #-24]
 3036 0aa0 031082E0 		add	r1, r2, r3
 3037 0aa4 7C209FE5 		ldr	r2, .L64
 3038 0aa8 10301BE5 		ldr	r3, [fp, #-16]
 3039 0aac 0302A0E1 		mov	r0, r3, asl #4
 3040 0ab0 14301BE5 		ldr	r3, [fp, #-20]
 3041 0ab4 033080E0 		add	r3, r0, r3
 3042 0ab8 8330A0E1 		mov	r3, r3, asl #1
 3043 0abc 033082E0 		add	r3, r2, r3
 3044 0ac0 B020D3E1 		ldrh	r2, [r3, #0]
 3045 0ac4 14301BE5 		ldr	r3, [fp, #-20]
 3046 0ac8 8330A0E1 		mov	r3, r3, asl #1
 3047 0acc 033081E0 		add	r3, r1, r3
 3048 0ad0 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 202:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++) {
 3049              		.loc 1 202 0 discriminator 2
 3050 0ad4 14301BE5 		ldr	r3, [fp, #-20]
 3051 0ad8 013083E2 		add	r3, r3, #1
 3052 0adc 14300BE5 		str	r3, [fp, #-20]
 3053              	.L61:
 202:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS-7;j++) {
 3054              		.loc 1 202 0 is_stmt 0 discriminator 1
 3055 0ae0 14301BE5 		ldr	r3, [fp, #-20]
 3056 0ae4 080053E3 		cmp	r3, #8
 3057 0ae8 E9FFFFDA 		ble	.L62
 201:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 3058              		.loc 1 201 0 is_stmt 1
 3059 0aec 10301BE5 		ldr	r3, [fp, #-16]
 3060 0af0 013083E2 		add	r3, r3, #1
 3061 0af4 10300BE5 		str	r3, [fp, #-16]
 3062              	.L60:
 201:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 3063              		.loc 1 201 0 is_stmt 0 discriminator 1
 3064 0af8 10301BE5 		ldr	r3, [fp, #-16]
 3065 0afc 080053E3 		cmp	r3, #8
 3066 0b00 E0FFFFDA 		ble	.L63
 204:../sudoku_2015.c **** 		}
 205:../sudoku_2015.c **** 	}
 206:../sudoku_2015.c **** 	primeraEjecucion = TRUE;
 3067              		.loc 1 206 0 is_stmt 1
 3068 0b04 20309FE5 		ldr	r3, .L64+4
 3069 0b08 0120A0E3 		mov	r2, #1
 3070 0b0c 002083E5 		str	r2, [r3, #0]
 207:../sudoku_2015.c **** 	tiempoCalculo = 0;
 3071              		.loc 1 207 0
 3072 0b10 18309FE5 		ldr	r3, .L64+8
 3073 0b14 0020A0E3 		mov	r2, #0
 3074 0b18 002083E5 		str	r2, [r3, #0]
 208:../sudoku_2015.c **** }
 3075              		.loc 1 208 0
 3076 0b1c 0CD04BE2 		sub	sp, fp, #12
 3077 0b20 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3078 0b24 1EFF2FE1 		bx	lr
 3079              	.L65:
 3080              		.align	2
 3081              	.L64:
 3082 0b28 00000000 		.word	cOriginal
 3083 0b2c 00000000 		.word	primeraEjecucion
 3084 0b30 00000000 		.word	tiempoCalculo
 3085              		.cfi_endproc
 3086              	.LFE11:
 3088              		.align	2
 3089              		.global	iniciarArmThumb
 3091              	iniciarArmThumb:
 3092              	.LFB12:
 209:../sudoku_2015.c **** 
 210:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 211:../sudoku_2015.c **** // Recalcula todo el sudoku
 212:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 213:../sudoku_2015.c **** void iniciarArmThumb(){
 3093              		.loc 1 213 0
 3094              		.cfi_startproc
 3095              		@ Function supports interworking.
 3096              		@ args = 0, pretend = 0, frame = 16
 3097              		@ frame_needed = 1, uses_anonymous_args = 0
 3098 0b34 0DC0A0E1 		mov	ip, sp
 3099              	.LCFI24:
 3100              		.cfi_def_cfa_register 12
 3101 0b38 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3102 0b3c 04B04CE2 		sub	fp, ip, #4
 3103              		.cfi_offset 14, -8
 3104              		.cfi_offset 13, -12
 3105              		.cfi_offset 11, -16
 3106              	.LCFI25:
 3107              		.cfi_def_cfa 11, 4
 3108 0b40 10D04DE2 		sub	sp, sp, #16
 214:../sudoku_2015.c **** 	uint32_t tiempo, t1, t2, t;
 215:../sudoku_2015.c **** 
 216:../sudoku_2015.c **** 	if(primeraEjecucion){
 3109              		.loc 1 216 0
 3110 0b44 04319FE5 		ldr	r3, .L73
 3111 0b48 003093E5 		ldr	r3, [r3, #0]
 3112 0b4c 000053E3 		cmp	r3, #0
 3113 0b50 2500000A 		beq	.L67
 3114              	.LBB5:
 217:../sudoku_2015.c **** 		int i,j;
 218:../sudoku_2015.c **** 		for(i=0;i<NUM_FILAS;i++) {
 3115              		.loc 1 218 0
 3116 0b54 0030A0E3 		mov	r3, #0
 3117 0b58 10300BE5 		str	r3, [fp, #-16]
 3118 0b5c 1B0000EA 		b	.L68
 3119              	.L71:
 219:../sudoku_2015.c **** 			for(j=0;j<NUM_COLUMNAS;j++) {
 3120              		.loc 1 219 0
 3121 0b60 0030A0E3 		mov	r3, #0
 3122 0b64 14300BE5 		str	r3, [fp, #-20]
 3123 0b68 120000EA 		b	.L69
 3124              	.L70:
 220:../sudoku_2015.c **** 				cOriginal[i][j] = cuadricula[i][j];
 3125              		.loc 1 220 0 discriminator 2
 3126 0b6c E0209FE5 		ldr	r2, .L73+4
 3127 0b70 10301BE5 		ldr	r3, [fp, #-16]
 3128 0b74 0312A0E1 		mov	r1, r3, asl #4
 3129 0b78 14301BE5 		ldr	r3, [fp, #-20]
 3130 0b7c 033081E0 		add	r3, r1, r3
 3131 0b80 8330A0E1 		mov	r3, r3, asl #1
 3132 0b84 033082E0 		add	r3, r2, r3
 3133 0b88 B020D3E1 		ldrh	r2, [r3, #0]
 3134 0b8c C4109FE5 		ldr	r1, .L73+8
 3135 0b90 10301BE5 		ldr	r3, [fp, #-16]
 3136 0b94 0302A0E1 		mov	r0, r3, asl #4
 3137 0b98 14301BE5 		ldr	r3, [fp, #-20]
 3138 0b9c 033080E0 		add	r3, r0, r3
 3139 0ba0 8330A0E1 		mov	r3, r3, asl #1
 3140 0ba4 033081E0 		add	r3, r1, r3
 3141 0ba8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 219:../sudoku_2015.c **** 			for(j=0;j<NUM_COLUMNAS;j++) {
 3142              		.loc 1 219 0 discriminator 2
 3143 0bac 14301BE5 		ldr	r3, [fp, #-20]
 3144 0bb0 013083E2 		add	r3, r3, #1
 3145 0bb4 14300BE5 		str	r3, [fp, #-20]
 3146              	.L69:
 219:../sudoku_2015.c **** 			for(j=0;j<NUM_COLUMNAS;j++) {
 3147              		.loc 1 219 0 is_stmt 0 discriminator 1
 3148 0bb8 14301BE5 		ldr	r3, [fp, #-20]
 3149 0bbc 0F0053E3 		cmp	r3, #15
 3150 0bc0 E9FFFFDA 		ble	.L70
 218:../sudoku_2015.c **** 		for(i=0;i<NUM_FILAS;i++) {
 3151              		.loc 1 218 0 is_stmt 1
 3152 0bc4 10301BE5 		ldr	r3, [fp, #-16]
 3153 0bc8 013083E2 		add	r3, r3, #1
 3154 0bcc 10300BE5 		str	r3, [fp, #-16]
 3155              	.L68:
 218:../sudoku_2015.c **** 		for(i=0;i<NUM_FILAS;i++) {
 3156              		.loc 1 218 0 is_stmt 0 discriminator 1
 3157 0bd0 10301BE5 		ldr	r3, [fp, #-16]
 3158 0bd4 080053E3 		cmp	r3, #8
 3159 0bd8 E0FFFFDA 		ble	.L71
 221:../sudoku_2015.c **** 			}
 222:../sudoku_2015.c **** 		}
 223:../sudoku_2015.c **** 		primeraEjecucion = FALSE;
 3160              		.loc 1 223 0 is_stmt 1
 3161 0bdc 6C309FE5 		ldr	r3, .L73
 3162 0be0 0020A0E3 		mov	r2, #0
 3163 0be4 002083E5 		str	r2, [r3, #0]
 3164 0be8 010000EA 		b	.L72
 3165              	.L67:
 3166              	.LBE5:
 224:../sudoku_2015.c **** 	} else {
 225:../sudoku_2015.c **** 		reiniciar_tablero(cuadricula);
 3167              		.loc 1 225 0
 3168 0bec 60009FE5 		ldr	r0, .L73+4
 3169 0bf0 FEFFFFEB 		bl	reiniciar_tablero
 3170              	.L72:
 226:../sudoku_2015.c **** 	}
 227:../sudoku_2015.c **** 	Timer2_Inicializar();
 3171              		.loc 1 227 0
 3172 0bf4 FEFFFFEB 		bl	Timer2_Inicializar
 228:../sudoku_2015.c **** 	Timer2_Empezar();				// Comienza la cuenta del timer 2.
 3173              		.loc 1 228 0
 3174 0bf8 FEFFFFEB 		bl	Timer2_Empezar
 229:../sudoku_2015.c **** 	t1 = Timer2_Leer();				// Leemos el tiempo de la partida.
 3175              		.loc 1 229 0
 3176 0bfc FEFFFFEB 		bl	Timer2_Leer
 3177 0c00 18000BE5 		str	r0, [fp, #-24]
 230:../sudoku_2015.c **** 	sudoku_recalcular_arm_thumb(cuadricula);
 3178              		.loc 1 230 0
 3179 0c04 48009FE5 		ldr	r0, .L73+4
 3180 0c08 FEFFFFEB 		bl	sudoku_recalcular_arm_thumb
 231:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3181              		.loc 1 231 0
 3182 0c0c FEFFFFEB 		bl	Timer2_Leer
 3183 0c10 1C000BE5 		str	r0, [fp, #-28]
 232:../sudoku_2015.c **** 	tiempoCalculo+=(t2-t1);
 3184              		.loc 1 232 0
 3185 0c14 1C201BE5 		ldr	r2, [fp, #-28]
 3186 0c18 18301BE5 		ldr	r3, [fp, #-24]
 3187 0c1c 022063E0 		rsb	r2, r3, r2
 3188 0c20 34309FE5 		ldr	r3, .L73+12
 3189 0c24 003093E5 		ldr	r3, [r3, #0]
 3190 0c28 032082E0 		add	r2, r2, r3
 3191 0c2c 28309FE5 		ldr	r3, .L73+12
 3192 0c30 002083E5 		str	r2, [r3, #0]
 233:../sudoku_2015.c **** 	setTiempoCalculo(tiempoCalculo);
 3193              		.loc 1 233 0
 3194 0c34 20309FE5 		ldr	r3, .L73+12
 3195 0c38 003093E5 		ldr	r3, [r3, #0]
 3196 0c3c 0300A0E1 		mov	r0, r3
 3197 0c40 FEFFFFEB 		bl	setTiempoCalculo
 234:../sudoku_2015.c **** }
 3198              		.loc 1 234 0
 3199 0c44 0CD04BE2 		sub	sp, fp, #12
 3200 0c48 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3201 0c4c 1EFF2FE1 		bx	lr
 3202              	.L74:
 3203              		.align	2
 3204              	.L73:
 3205 0c50 00000000 		.word	primeraEjecucion
 3206 0c54 00000000 		.word	cuadricula
 3207 0c58 00000000 		.word	cOriginal
 3208 0c5c 00000000 		.word	tiempoCalculo
 3209              		.cfi_endproc
 3210              	.LFE12:
 3212              		.align	2
 3213              		.global	insertValor
 3215              	insertValor:
 3216              	.LFB13:
 235:../sudoku_2015.c **** 
 236:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 237:../sudoku_2015.c **** // Inserta un valor en una celda y recalcula todo el sudoku, si y solo si
 238:../sudoku_2015.c **** // dicha celda no es pista. Devuelve las celdas vacias del sudoku.
 239:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 240:../sudoku_2015.c **** int insertValor(int fila, int columna, int valor){
 3217              		.loc 1 240 0
 3218              		.cfi_startproc
 3219              		@ Function supports interworking.
 3220              		@ args = 0, pretend = 0, frame = 32
 3221              		@ frame_needed = 1, uses_anonymous_args = 0
 3222 0c60 0DC0A0E1 		mov	ip, sp
 3223              	.LCFI26:
 3224              		.cfi_def_cfa_register 12
 3225 0c64 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3226 0c68 04B04CE2 		sub	fp, ip, #4
 3227              		.cfi_offset 14, -8
 3228              		.cfi_offset 13, -12
 3229              		.cfi_offset 11, -16
 3230              	.LCFI27:
 3231              		.cfi_def_cfa 11, 4
 3232 0c6c 20D04DE2 		sub	sp, sp, #32
 3233 0c70 20000BE5 		str	r0, [fp, #-32]
 3234 0c74 24100BE5 		str	r1, [fp, #-36]
 3235 0c78 28200BE5 		str	r2, [fp, #-40]
 241:../sudoku_2015.c **** 	if(!esPista(fila-1,columna-1)){
 3236              		.loc 1 241 0
 3237 0c7c 20301BE5 		ldr	r3, [fp, #-32]
 3238 0c80 012043E2 		sub	r2, r3, #1
 3239 0c84 24301BE5 		ldr	r3, [fp, #-36]
 3240 0c88 013043E2 		sub	r3, r3, #1
 3241 0c8c 0200A0E1 		mov	r0, r2
 3242 0c90 0310A0E1 		mov	r1, r3
 3243 0c94 FEFFFFEB 		bl	esPista
 3244 0c98 0030A0E1 		mov	r3, r0
 3245 0c9c 000053E3 		cmp	r3, #0
 3246 0ca0 2300001A 		bne	.L77
 3247              	.LBB6:
 242:../sudoku_2015.c **** 		uint32_t tiempo;
 243:../sudoku_2015.c **** 		celda_poner_valor(&cuadricula[fila-1][columna-1], valor);
 3248              		.loc 1 243 0
 3249 0ca4 98209FE5 		ldr	r2, .L78
 3250 0ca8 20301BE5 		ldr	r3, [fp, #-32]
 3251 0cac 013043E2 		sub	r3, r3, #1
 3252 0cb0 0312A0E1 		mov	r1, r3, asl #4
 3253 0cb4 24301BE5 		ldr	r3, [fp, #-36]
 3254 0cb8 033081E0 		add	r3, r1, r3
 3255 0cbc 013043E2 		sub	r3, r3, #1
 3256 0cc0 8330A0E1 		mov	r3, r3, asl #1
 3257 0cc4 032082E0 		add	r2, r2, r3
 3258 0cc8 28301BE5 		ldr	r3, [fp, #-40]
 3259 0ccc FF3003E2 		and	r3, r3, #255
 3260 0cd0 0200A0E1 		mov	r0, r2
 3261 0cd4 0310A0E1 		mov	r1, r3
 3262 0cd8 FEFFFFEB 		bl	celda_poner_valor
 244:../sudoku_2015.c **** 		Timer2_Inicializar();
 3263              		.loc 1 244 0
 3264 0cdc FEFFFFEB 		bl	Timer2_Inicializar
 245:../sudoku_2015.c **** 		uint32_t t1 = Timer2_Leer();		// Leemos el tiempo de la partida.
 3265              		.loc 1 245 0
 3266 0ce0 FEFFFFEB 		bl	Timer2_Leer
 3267 0ce4 10000BE5 		str	r0, [fp, #-16]
 246:../sudoku_2015.c **** 		int celdasVacias = sudoku_recalcular_arm_thumb(cuadricula);
 3268              		.loc 1 246 0
 3269 0ce8 54009FE5 		ldr	r0, .L78
 3270 0cec FEFFFFEB 		bl	sudoku_recalcular_arm_thumb
 3271 0cf0 14000BE5 		str	r0, [fp, #-20]
 247:../sudoku_2015.c **** 		uint32_t t2=Timer2_Leer();
 3272              		.loc 1 247 0
 3273 0cf4 FEFFFFEB 		bl	Timer2_Leer
 3274 0cf8 18000BE5 		str	r0, [fp, #-24]
 248:../sudoku_2015.c **** 		tiempoCalculo+=(t2-t1);
 3275              		.loc 1 248 0
 3276 0cfc 18201BE5 		ldr	r2, [fp, #-24]
 3277 0d00 10301BE5 		ldr	r3, [fp, #-16]
 3278 0d04 022063E0 		rsb	r2, r3, r2
 3279 0d08 38309FE5 		ldr	r3, .L78+4
 3280 0d0c 003093E5 		ldr	r3, [r3, #0]
 3281 0d10 032082E0 		add	r2, r2, r3
 3282 0d14 2C309FE5 		ldr	r3, .L78+4
 3283 0d18 002083E5 		str	r2, [r3, #0]
 249:../sudoku_2015.c **** 		setTiempoCalculo(tiempoCalculo);
 3284              		.loc 1 249 0
 3285 0d1c 24309FE5 		ldr	r3, .L78+4
 3286 0d20 003093E5 		ldr	r3, [r3, #0]
 3287 0d24 0300A0E1 		mov	r0, r3
 3288 0d28 FEFFFFEB 		bl	setTiempoCalculo
 250:../sudoku_2015.c **** 		return celdasVacias;
 3289              		.loc 1 250 0
 3290 0d2c 14301BE5 		ldr	r3, [fp, #-20]
 3291 0d30 FFFFFFEA 		b	.L75
 3292              	.L77:
 3293              	.L75:
 3294              	.LBE6:
 251:../sudoku_2015.c **** 	}
 252:../sudoku_2015.c **** }
 3295              		.loc 1 252 0
 3296 0d34 0300A0E1 		mov	r0, r3
 3297 0d38 0CD04BE2 		sub	sp, fp, #12
 3298 0d3c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3299 0d40 1EFF2FE1 		bx	lr
 3300              	.L79:
 3301              		.align	2
 3302              	.L78:
 3303 0d44 00000000 		.word	cuadricula
 3304 0d48 00000000 		.word	tiempoCalculo
 3305              		.cfi_endproc
 3306              	.LFE13:
 3308              		.align	2
 3309              		.global	sudoku9x9
 3311              	sudoku9x9:
 3312              	.LFB14:
 253:../sudoku_2015.c **** 
 254:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 255:../sudoku_2015.c **** // proceso principal del juego que recibe el tablero,
 256:../sudoku_2015.c **** // y la señal de ready que indica que se han actualizado fila y columna
 257:../sudoku_2015.c **** ////////////////////////////////////////////////////////////////////////////////
 258:../sudoku_2015.c **** void sudoku9x9() {
 3313              		.loc 1 258 0
 3314              		.cfi_startproc
 3315              		@ Function supports interworking.
 3316              		@ args = 0, pretend = 0, frame = 24
 3317              		@ frame_needed = 1, uses_anonymous_args = 0
 3318 0d4c 0DC0A0E1 		mov	ip, sp
 3319              	.LCFI28:
 3320              		.cfi_def_cfa_register 12
 3321 0d50 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3322 0d54 04B04CE2 		sub	fp, ip, #4
 3323              		.cfi_offset 14, -8
 3324              		.cfi_offset 13, -12
 3325              		.cfi_offset 11, -16
 3326              	.LCFI29:
 3327              		.cfi_def_cfa 11, 4
 3328 0d58 18D04DE2 		sub	sp, sp, #24
 259:../sudoku_2015.c **** 	uint32_t t1, t2;
 260:../sudoku_2015.c **** 	int i,j,todos_correctos=TRUE;
 3329              		.loc 1 260 0
 3330 0d5c 0130A0E3 		mov	r3, #1
 3331 0d60 18300BE5 		str	r3, [fp, #-24]
 261:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 3332              		.loc 1 261 0
 3333 0d64 0030A0E3 		mov	r3, #0
 3334 0d68 10300BE5 		str	r3, [fp, #-16]
 3335 0d6c 2B0000EA 		b	.L81
 3336              	.L84:
 262:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS;j++) {
 3337              		.loc 1 262 0
 3338 0d70 0030A0E3 		mov	r3, #0
 3339 0d74 14300BE5 		str	r3, [fp, #-20]
 3340 0d78 220000EA 		b	.L82
 3341              	.L83:
 263:../sudoku_2015.c **** 			cAux[i][j] = cuadricula[i][j];
 3342              		.loc 1 263 0 discriminator 2
 3343 0d7c 64229FE5 		ldr	r2, .L90
 3344 0d80 10301BE5 		ldr	r3, [fp, #-16]
 3345 0d84 0312A0E1 		mov	r1, r3, asl #4
 3346 0d88 14301BE5 		ldr	r3, [fp, #-20]
 3347 0d8c 033081E0 		add	r3, r1, r3
 3348 0d90 8330A0E1 		mov	r3, r3, asl #1
 3349 0d94 033082E0 		add	r3, r2, r3
 3350 0d98 B020D3E1 		ldrh	r2, [r3, #0]
 3351 0d9c 48129FE5 		ldr	r1, .L90+4
 3352 0da0 10301BE5 		ldr	r3, [fp, #-16]
 3353 0da4 0302A0E1 		mov	r0, r3, asl #4
 3354 0da8 14301BE5 		ldr	r3, [fp, #-20]
 3355 0dac 033080E0 		add	r3, r0, r3
 3356 0db0 8330A0E1 		mov	r3, r3, asl #1
 3357 0db4 033081E0 		add	r3, r1, r3
 3358 0db8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 264:../sudoku_2015.c **** 			cOriginal[i][j] = cuadricula[i][j];
 3359              		.loc 1 264 0 discriminator 2
 3360 0dbc 24229FE5 		ldr	r2, .L90
 3361 0dc0 10301BE5 		ldr	r3, [fp, #-16]
 3362 0dc4 0312A0E1 		mov	r1, r3, asl #4
 3363 0dc8 14301BE5 		ldr	r3, [fp, #-20]
 3364 0dcc 033081E0 		add	r3, r1, r3
 3365 0dd0 8330A0E1 		mov	r3, r3, asl #1
 3366 0dd4 033082E0 		add	r3, r2, r3
 3367 0dd8 B020D3E1 		ldrh	r2, [r3, #0]
 3368 0ddc 0C129FE5 		ldr	r1, .L90+8
 3369 0de0 10301BE5 		ldr	r3, [fp, #-16]
 3370 0de4 0302A0E1 		mov	r0, r3, asl #4
 3371 0de8 14301BE5 		ldr	r3, [fp, #-20]
 3372 0dec 033080E0 		add	r3, r0, r3
 3373 0df0 8330A0E1 		mov	r3, r3, asl #1
 3374 0df4 033081E0 		add	r3, r1, r3
 3375 0df8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 262:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS;j++) {
 3376              		.loc 1 262 0 discriminator 2
 3377 0dfc 14301BE5 		ldr	r3, [fp, #-20]
 3378 0e00 013083E2 		add	r3, r3, #1
 3379 0e04 14300BE5 		str	r3, [fp, #-20]
 3380              	.L82:
 262:../sudoku_2015.c **** 		for(j=0;j<NUM_COLUMNAS;j++) {
 3381              		.loc 1 262 0 is_stmt 0 discriminator 1
 3382 0e08 14301BE5 		ldr	r3, [fp, #-20]
 3383 0e0c 0F0053E3 		cmp	r3, #15
 3384 0e10 D9FFFFDA 		ble	.L83
 261:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 3385              		.loc 1 261 0 is_stmt 1
 3386 0e14 10301BE5 		ldr	r3, [fp, #-16]
 3387 0e18 013083E2 		add	r3, r3, #1
 3388 0e1c 10300BE5 		str	r3, [fp, #-16]
 3389              	.L81:
 261:../sudoku_2015.c **** 	for(i=0;i<NUM_FILAS;i++) {
 3390              		.loc 1 261 0 is_stmt 0 discriminator 1
 3391 0e20 10301BE5 		ldr	r3, [fp, #-16]
 3392 0e24 080053E3 		cmp	r3, #8
 3393 0e28 D0FFFFDA 		ble	.L84
 265:../sudoku_2015.c **** 		}
 266:../sudoku_2015.c **** 	}
 267:../sudoku_2015.c **** 	t1=Timer2_Leer();
 3394              		.loc 1 267 0 is_stmt 1
 3395 0e2c FEFFFFEB 		bl	Timer2_Leer
 3396 0e30 1C000BE5 		str	r0, [fp, #-28]
 268:../sudoku_2015.c **** 	sudoku_recalcular_c(cuadricula);
 3397              		.loc 1 268 0
 3398 0e34 AC019FE5 		ldr	r0, .L90
 3399 0e38 FEFFFFEB 		bl	sudoku_recalcular_c
 269:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3400              		.loc 1 269 0
 3401 0e3c FEFFFFEB 		bl	Timer2_Leer
 3402 0e40 20000BE5 		str	r0, [fp, #-32]
 270:../sudoku_2015.c **** 	t2=t2-t1;
 3403              		.loc 1 270 0
 3404 0e44 20201BE5 		ldr	r2, [fp, #-32]
 3405 0e48 1C301BE5 		ldr	r3, [fp, #-28]
 3406 0e4c 023063E0 		rsb	r3, r3, r2
 3407 0e50 20300BE5 		str	r3, [fp, #-32]
 271:../sudoku_2015.c **** 
 272:../sudoku_2015.c **** 	t1=Timer2_Leer();
 3408              		.loc 1 272 0
 3409 0e54 FEFFFFEB 		bl	Timer2_Leer
 3410 0e58 1C000BE5 		str	r0, [fp, #-28]
 273:../sudoku_2015.c **** 	sudoku_recalcular_c_arm(cAux);
 3411              		.loc 1 273 0
 3412 0e5c 88019FE5 		ldr	r0, .L90+4
 3413 0e60 FEFFFFEB 		bl	sudoku_recalcular_c_arm
 274:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3414              		.loc 1 274 0
 3415 0e64 FEFFFFEB 		bl	Timer2_Leer
 3416 0e68 20000BE5 		str	r0, [fp, #-32]
 275:../sudoku_2015.c **** 	t2=t2-t1;
 3417              		.loc 1 275 0
 3418 0e6c 20201BE5 		ldr	r2, [fp, #-32]
 3419 0e70 1C301BE5 		ldr	r3, [fp, #-28]
 3420 0e74 023063E0 		rsb	r3, r3, r2
 3421 0e78 20300BE5 		str	r3, [fp, #-32]
 276:../sudoku_2015.c **** 	if(!validar(cAux, cuadricula)) 	todos_correctos=FALSE;
 3422              		.loc 1 276 0
 3423 0e7c 68019FE5 		ldr	r0, .L90+4
 3424 0e80 60119FE5 		ldr	r1, .L90
 3425 0e84 FEFFFFEB 		bl	validar
 3426 0e88 0030A0E1 		mov	r3, r0
 3427 0e8c 000053E3 		cmp	r3, #0
 3428 0e90 0100001A 		bne	.L85
 3429              		.loc 1 276 0 is_stmt 0 discriminator 1
 3430 0e94 0030A0E3 		mov	r3, #0
 3431 0e98 18300BE5 		str	r3, [fp, #-24]
 3432              	.L85:
 277:../sudoku_2015.c **** 	reiniciar_tablero(cAux);
 3433              		.loc 1 277 0 is_stmt 1
 3434 0e9c 48019FE5 		ldr	r0, .L90+4
 3435 0ea0 FEFFFFEB 		bl	reiniciar_tablero
 278:../sudoku_2015.c **** 
 279:../sudoku_2015.c **** 	t1=Timer2_Leer();
 3436              		.loc 1 279 0
 3437 0ea4 FEFFFFEB 		bl	Timer2_Leer
 3438 0ea8 1C000BE5 		str	r0, [fp, #-28]
 280:../sudoku_2015.c **** 	sudoku_recalcular_c_thumb(cAux);
 3439              		.loc 1 280 0
 3440 0eac 38019FE5 		ldr	r0, .L90+4
 3441 0eb0 FEFFFFEB 		bl	sudoku_recalcular_c_thumb
 281:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3442              		.loc 1 281 0
 3443 0eb4 FEFFFFEB 		bl	Timer2_Leer
 3444 0eb8 20000BE5 		str	r0, [fp, #-32]
 282:../sudoku_2015.c **** 	t2=t2-t1;
 3445              		.loc 1 282 0
 3446 0ebc 20201BE5 		ldr	r2, [fp, #-32]
 3447 0ec0 1C301BE5 		ldr	r3, [fp, #-28]
 3448 0ec4 023063E0 		rsb	r3, r3, r2
 3449 0ec8 20300BE5 		str	r3, [fp, #-32]
 283:../sudoku_2015.c **** 	if(!validar(cAux, cuadricula)) 	todos_correctos=FALSE;
 3450              		.loc 1 283 0
 3451 0ecc 18019FE5 		ldr	r0, .L90+4
 3452 0ed0 10119FE5 		ldr	r1, .L90
 3453 0ed4 FEFFFFEB 		bl	validar
 3454 0ed8 0030A0E1 		mov	r3, r0
 3455 0edc 000053E3 		cmp	r3, #0
 3456 0ee0 0100001A 		bne	.L86
 3457              		.loc 1 283 0 is_stmt 0 discriminator 1
 3458 0ee4 0030A0E3 		mov	r3, #0
 3459 0ee8 18300BE5 		str	r3, [fp, #-24]
 3460              	.L86:
 284:../sudoku_2015.c **** 	reiniciar_tablero(cAux);
 3461              		.loc 1 284 0 is_stmt 1
 3462 0eec F8009FE5 		ldr	r0, .L90+4
 3463 0ef0 FEFFFFEB 		bl	reiniciar_tablero
 285:../sudoku_2015.c **** 
 286:../sudoku_2015.c **** 	t1=Timer2_Leer();
 3464              		.loc 1 286 0
 3465 0ef4 FEFFFFEB 		bl	Timer2_Leer
 3466 0ef8 1C000BE5 		str	r0, [fp, #-28]
 287:../sudoku_2015.c **** 	sudoku_recalcular_arm(cAux);
 3467              		.loc 1 287 0
 3468 0efc E8009FE5 		ldr	r0, .L90+4
 3469 0f00 FEFFFFEB 		bl	sudoku_recalcular_arm
 288:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3470              		.loc 1 288 0
 3471 0f04 FEFFFFEB 		bl	Timer2_Leer
 3472 0f08 20000BE5 		str	r0, [fp, #-32]
 289:../sudoku_2015.c **** 	t2=t2-t1;
 3473              		.loc 1 289 0
 3474 0f0c 20201BE5 		ldr	r2, [fp, #-32]
 3475 0f10 1C301BE5 		ldr	r3, [fp, #-28]
 3476 0f14 023063E0 		rsb	r3, r3, r2
 3477 0f18 20300BE5 		str	r3, [fp, #-32]
 290:../sudoku_2015.c **** 	if(!validar(cAux, cuadricula)) 	todos_correctos=FALSE;
 3478              		.loc 1 290 0
 3479 0f1c C8009FE5 		ldr	r0, .L90+4
 3480 0f20 C0109FE5 		ldr	r1, .L90
 3481 0f24 FEFFFFEB 		bl	validar
 3482 0f28 0030A0E1 		mov	r3, r0
 3483 0f2c 000053E3 		cmp	r3, #0
 3484 0f30 0100001A 		bne	.L87
 3485              		.loc 1 290 0 is_stmt 0 discriminator 1
 3486 0f34 0030A0E3 		mov	r3, #0
 3487 0f38 18300BE5 		str	r3, [fp, #-24]
 3488              	.L87:
 291:../sudoku_2015.c **** 	reiniciar_tablero(cAux);
 3489              		.loc 1 291 0 is_stmt 1
 3490 0f3c A8009FE5 		ldr	r0, .L90+4
 3491 0f40 FEFFFFEB 		bl	reiniciar_tablero
 292:../sudoku_2015.c **** 
 293:../sudoku_2015.c **** 	t1=Timer2_Leer();
 3492              		.loc 1 293 0
 3493 0f44 FEFFFFEB 		bl	Timer2_Leer
 3494 0f48 1C000BE5 		str	r0, [fp, #-28]
 294:../sudoku_2015.c **** 	sudoku_recalcular_arm_c(cAux);
 3495              		.loc 1 294 0
 3496 0f4c 98009FE5 		ldr	r0, .L90+4
 3497 0f50 FEFFFFEB 		bl	sudoku_recalcular_arm_c
 295:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3498              		.loc 1 295 0
 3499 0f54 FEFFFFEB 		bl	Timer2_Leer
 3500 0f58 20000BE5 		str	r0, [fp, #-32]
 296:../sudoku_2015.c **** 	t2=t2-t1;
 3501              		.loc 1 296 0
 3502 0f5c 20201BE5 		ldr	r2, [fp, #-32]
 3503 0f60 1C301BE5 		ldr	r3, [fp, #-28]
 3504 0f64 023063E0 		rsb	r3, r3, r2
 3505 0f68 20300BE5 		str	r3, [fp, #-32]
 297:../sudoku_2015.c **** 	if(!validar(cAux, cuadricula)) 	todos_correctos=FALSE;
 3506              		.loc 1 297 0
 3507 0f6c 78009FE5 		ldr	r0, .L90+4
 3508 0f70 70109FE5 		ldr	r1, .L90
 3509 0f74 FEFFFFEB 		bl	validar
 3510 0f78 0030A0E1 		mov	r3, r0
 3511 0f7c 000053E3 		cmp	r3, #0
 3512 0f80 0100001A 		bne	.L88
 3513              		.loc 1 297 0 is_stmt 0 discriminator 1
 3514 0f84 0030A0E3 		mov	r3, #0
 3515 0f88 18300BE5 		str	r3, [fp, #-24]
 3516              	.L88:
 298:../sudoku_2015.c **** 	reiniciar_tablero(cAux);
 3517              		.loc 1 298 0 is_stmt 1
 3518 0f8c 58009FE5 		ldr	r0, .L90+4
 3519 0f90 FEFFFFEB 		bl	reiniciar_tablero
 299:../sudoku_2015.c **** 
 300:../sudoku_2015.c **** 	t1=Timer2_Leer();
 3520              		.loc 1 300 0
 3521 0f94 FEFFFFEB 		bl	Timer2_Leer
 3522 0f98 1C000BE5 		str	r0, [fp, #-28]
 301:../sudoku_2015.c **** 	sudoku_recalcular_arm_thumb(cAux);
 3523              		.loc 1 301 0
 3524 0f9c 48009FE5 		ldr	r0, .L90+4
 3525 0fa0 FEFFFFEB 		bl	sudoku_recalcular_arm_thumb
 302:../sudoku_2015.c **** 	t2=Timer2_Leer();
 3526              		.loc 1 302 0
 3527 0fa4 FEFFFFEB 		bl	Timer2_Leer
 3528 0fa8 20000BE5 		str	r0, [fp, #-32]
 303:../sudoku_2015.c **** 	t2=t2-t1;
 3529              		.loc 1 303 0
 3530 0fac 20201BE5 		ldr	r2, [fp, #-32]
 3531 0fb0 1C301BE5 		ldr	r3, [fp, #-28]
 3532 0fb4 023063E0 		rsb	r3, r3, r2
 3533 0fb8 20300BE5 		str	r3, [fp, #-32]
 304:../sudoku_2015.c **** 	if(!validar(cAux, cuadricula)) 	todos_correctos=FALSE;
 3534              		.loc 1 304 0
 3535 0fbc 28009FE5 		ldr	r0, .L90+4
 3536 0fc0 20109FE5 		ldr	r1, .L90
 3537 0fc4 FEFFFFEB 		bl	validar
 3538 0fc8 0030A0E1 		mov	r3, r0
 3539 0fcc 000053E3 		cmp	r3, #0
 3540 0fd0 0100001A 		bne	.L80
 3541              		.loc 1 304 0 is_stmt 0 discriminator 1
 3542 0fd4 0030A0E3 		mov	r3, #0
 3543 0fd8 18300BE5 		str	r3, [fp, #-24]
 3544              	.L80:
 305:../sudoku_2015.c **** }
 3545              		.loc 1 305 0 is_stmt 1
 3546 0fdc 0CD04BE2 		sub	sp, fp, #12
 3547 0fe0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3548 0fe4 1EFF2FE1 		bx	lr
 3549              	.L91:
 3550              		.align	2
 3551              	.L90:
 3552 0fe8 00000000 		.word	cuadricula
 3553 0fec 00000000 		.word	cAux
 3554 0ff0 00000000 		.word	cOriginal
 3555              		.cfi_endproc
 3556              	.LFE14:
 3558              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sudoku_2015.c
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1792   .data:00000000 primeraEjecucion
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1789   .data:00000000 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1799   .bss:00000000 tiempoCalculo
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1796   .bss:00000000 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1806   .data:00000020 cuadricula
                            *COM*:00000120 cAux
                            *COM*:00000120 cOriginal
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1954   .text:00000000 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:1957   .text:00000000 celda_poner_valor
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2008   .text:00000074 celda_leer_valor
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2045   .text:000000b0 obtenerValor
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2085   .text:00000104 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2089   .text:00000108 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2092   .text:00000108 esPista
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2130   .text:00000154 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2134   .text:00000158 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2137   .text:00000158 esError
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2175   .text:000001a4 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2179   .text:000001a8 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2182   .text:000001a8 esCandidato
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2225   .text:00000208 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2229   .text:0000020c $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2232   .text:0000020c sudoku_candidatos_c
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2637   .text:0000071c $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2641   .text:00000720 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2644   .text:00000720 sudoku_recalcular_c
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2736   .text:000007fc sudoku_recalcular_c_arm
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2824   .text:000008c8 sudoku_recalcular_c_thumb
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:2912   .text:00000994 validar
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3003   .text:00000a68 reiniciar_tablero
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3082   .text:00000b28 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3088   .text:00000b34 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3091   .text:00000b34 iniciarArmThumb
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3205   .text:00000c50 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3212   .text:00000c60 $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3215   .text:00000c60 insertValor
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3303   .text:00000d44 $d
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3308   .text:00000d4c $a
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3311   .text:00000d4c sudoku9x9
C:\Users\a680669\AppData\Local\Temp\ccNoQKjr.s:3552   .text:00000fe8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sudoku_candidatos_arm
sudoku_candidatos_thumb
Timer2_Inicializar
Timer2_Empezar
Timer2_Leer
sudoku_recalcular_arm_thumb
setTiempoCalculo
sudoku_recalcular_arm
sudoku_recalcular_arm_c
