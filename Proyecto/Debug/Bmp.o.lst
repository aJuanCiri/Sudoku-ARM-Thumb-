   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"Bmp.c"
  21              	.Ltext0:
  22              		.file 1 "../Bmp.c"
 1212              		.align	2
 1215              	ucMouseMap:
 1216 0000 0F       		.byte	15
 1217 0001 FF       		.byte	-1
 1218 0002 FF       		.byte	-1
 1219 0003 FF       		.byte	-1
 1220 0004 FF       		.byte	-1
 1221 0005 FF       		.byte	-1
 1222 0006 FF       		.byte	-1
 1223 0007 FF       		.byte	-1
 1224 0008 FF       		.byte	-1
 1225 0009 FF       		.byte	-1
 1226 000a FF       		.byte	-1
 1227 000b FF       		.byte	-1
 1228 000c 0F       		.byte	15
 1229 000d 0F       		.byte	15
 1230 000e FF       		.byte	-1
 1231 000f FF       		.byte	-1
 1232 0010 FF       		.byte	-1
 1233 0011 FF       		.byte	-1
 1234 0012 FF       		.byte	-1
 1235 0013 FF       		.byte	-1
 1236 0014 FF       		.byte	-1
 1237 0015 FF       		.byte	-1
 1238 0016 FF       		.byte	-1
 1239 0017 FF       		.byte	-1
 1240 0018 0F       		.byte	15
 1241 0019 00       		.byte	0
 1242 001a 0F       		.byte	15
 1243 001b FF       		.byte	-1
 1244 001c FF       		.byte	-1
 1245 001d FF       		.byte	-1
 1246 001e FF       		.byte	-1
 1247 001f FF       		.byte	-1
 1248 0020 FF       		.byte	-1
 1249 0021 FF       		.byte	-1
 1250 0022 FF       		.byte	-1
 1251 0023 FF       		.byte	-1
 1252 0024 0F       		.byte	15
 1253 0025 00       		.byte	0
 1254 0026 00       		.byte	0
 1255 0027 0F       		.byte	15
 1256 0028 FF       		.byte	-1
 1257 0029 FF       		.byte	-1
 1258 002a FF       		.byte	-1
 1259 002b FF       		.byte	-1
 1260 002c FF       		.byte	-1
 1261 002d FF       		.byte	-1
 1262 002e FF       		.byte	-1
 1263 002f FF       		.byte	-1
 1264 0030 0F       		.byte	15
 1265 0031 00       		.byte	0
 1266 0032 00       		.byte	0
 1267 0033 00       		.byte	0
 1268 0034 0F       		.byte	15
 1269 0035 FF       		.byte	-1
 1270 0036 FF       		.byte	-1
 1271 0037 FF       		.byte	-1
 1272 0038 FF       		.byte	-1
 1273 0039 FF       		.byte	-1
 1274 003a FF       		.byte	-1
 1275 003b FF       		.byte	-1
 1276 003c 0F       		.byte	15
 1277 003d 00       		.byte	0
 1278 003e 00       		.byte	0
 1279 003f 00       		.byte	0
 1280 0040 00       		.byte	0
 1281 0041 0F       		.byte	15
 1282 0042 FF       		.byte	-1
 1283 0043 FF       		.byte	-1
 1284 0044 FF       		.byte	-1
 1285 0045 FF       		.byte	-1
 1286 0046 FF       		.byte	-1
 1287 0047 FF       		.byte	-1
 1288 0048 0F       		.byte	15
 1289 0049 00       		.byte	0
 1290 004a 00       		.byte	0
 1291 004b 00       		.byte	0
 1292 004c 00       		.byte	0
 1293 004d 00       		.byte	0
 1294 004e 0F       		.byte	15
 1295 004f FF       		.byte	-1
 1296 0050 FF       		.byte	-1
 1297 0051 FF       		.byte	-1
 1298 0052 FF       		.byte	-1
 1299 0053 FF       		.byte	-1
 1300 0054 0F       		.byte	15
 1301 0055 00       		.byte	0
 1302 0056 00       		.byte	0
 1303 0057 00       		.byte	0
 1304 0058 00       		.byte	0
 1305 0059 00       		.byte	0
 1306 005a 00       		.byte	0
 1307 005b 0F       		.byte	15
 1308 005c FF       		.byte	-1
 1309 005d FF       		.byte	-1
 1310 005e FF       		.byte	-1
 1311 005f FF       		.byte	-1
 1312 0060 0F       		.byte	15
 1313 0061 00       		.byte	0
 1314 0062 00       		.byte	0
 1315 0063 00       		.byte	0
 1316 0064 00       		.byte	0
 1317 0065 00       		.byte	0
 1318 0066 00       		.byte	0
 1319 0067 00       		.byte	0
 1320 0068 0F       		.byte	15
 1321 0069 FF       		.byte	-1
 1322 006a FF       		.byte	-1
 1323 006b FF       		.byte	-1
 1324 006c 0F       		.byte	15
 1325 006d 00       		.byte	0
 1326 006e 00       		.byte	0
 1327 006f 00       		.byte	0
 1328 0070 00       		.byte	0
 1329 0071 00       		.byte	0
 1330 0072 00       		.byte	0
 1331 0073 00       		.byte	0
 1332 0074 00       		.byte	0
 1333 0075 0F       		.byte	15
 1334 0076 FF       		.byte	-1
 1335 0077 FF       		.byte	-1
 1336 0078 0F       		.byte	15
 1337 0079 00       		.byte	0
 1338 007a 00       		.byte	0
 1339 007b 00       		.byte	0
 1340 007c 00       		.byte	0
 1341 007d 00       		.byte	0
 1342 007e 00       		.byte	0
 1343 007f 00       		.byte	0
 1344 0080 00       		.byte	0
 1345 0081 00       		.byte	0
 1346 0082 0F       		.byte	15
 1347 0083 FF       		.byte	-1
 1348 0084 0F       		.byte	15
 1349 0085 00       		.byte	0
 1350 0086 00       		.byte	0
 1351 0087 00       		.byte	0
 1352 0088 00       		.byte	0
 1353 0089 00       		.byte	0
 1354 008a 00       		.byte	0
 1355 008b 0F       		.byte	15
 1356 008c 0F       		.byte	15
 1357 008d 0F       		.byte	15
 1358 008e 0F       		.byte	15
 1359 008f 0F       		.byte	15
 1360 0090 0F       		.byte	15
 1361 0091 00       		.byte	0
 1362 0092 00       		.byte	0
 1363 0093 0F       		.byte	15
 1364 0094 00       		.byte	0
 1365 0095 00       		.byte	0
 1366 0096 00       		.byte	0
 1367 0097 0F       		.byte	15
 1368 0098 FF       		.byte	-1
 1369 0099 FF       		.byte	-1
 1370 009a FF       		.byte	-1
 1371 009b FF       		.byte	-1
 1372 009c 0F       		.byte	15
 1373 009d 00       		.byte	0
 1374 009e 0F       		.byte	15
 1375 009f FF       		.byte	-1
 1376 00a0 0F       		.byte	15
 1377 00a1 00       		.byte	0
 1378 00a2 00       		.byte	0
 1379 00a3 00       		.byte	0
 1380 00a4 0F       		.byte	15
 1381 00a5 FF       		.byte	-1
 1382 00a6 FF       		.byte	-1
 1383 00a7 FF       		.byte	-1
 1384 00a8 0F       		.byte	15
 1385 00a9 0F       		.byte	15
 1386 00aa FF       		.byte	-1
 1387 00ab FF       		.byte	-1
 1388 00ac 0F       		.byte	15
 1389 00ad 00       		.byte	0
 1390 00ae 00       		.byte	0
 1391 00af 00       		.byte	0
 1392 00b0 0F       		.byte	15
 1393 00b1 FF       		.byte	-1
 1394 00b2 FF       		.byte	-1
 1395 00b3 FF       		.byte	-1
 1396 00b4 0F       		.byte	15
 1397 00b5 FF       		.byte	-1
 1398 00b6 FF       		.byte	-1
 1399 00b7 FF       		.byte	-1
 1400 00b8 FF       		.byte	-1
 1401 00b9 0F       		.byte	15
 1402 00ba 00       		.byte	0
 1403 00bb 00       		.byte	0
 1404 00bc 00       		.byte	0
 1405 00bd 0F       		.byte	15
 1406 00be FF       		.byte	-1
 1407 00bf FF       		.byte	-1
 1408 00c0 FF       		.byte	-1
 1409 00c1 FF       		.byte	-1
 1410 00c2 FF       		.byte	-1
 1411 00c3 FF       		.byte	-1
 1412 00c4 FF       		.byte	-1
 1413 00c5 0F       		.byte	15
 1414 00c6 00       		.byte	0
 1415 00c7 00       		.byte	0
 1416 00c8 00       		.byte	0
 1417 00c9 0F       		.byte	15
 1418 00ca FF       		.byte	-1
 1419 00cb FF       		.byte	-1
 1420 00cc FF       		.byte	-1
 1421 00cd FF       		.byte	-1
 1422 00ce FF       		.byte	-1
 1423 00cf FF       		.byte	-1
 1424 00d0 FF       		.byte	-1
 1425 00d1 FF       		.byte	-1
 1426 00d2 0F       		.byte	15
 1427 00d3 00       		.byte	0
 1428 00d4 00       		.byte	0
 1429 00d5 00       		.byte	0
 1430 00d6 0F       		.byte	15
 1431 00d7 FF       		.byte	-1
 1432 00d8 FF       		.byte	-1
 1433 00d9 FF       		.byte	-1
 1434 00da FF       		.byte	-1
 1435 00db FF       		.byte	-1
 1436 00dc FF       		.byte	-1
 1437 00dd FF       		.byte	-1
 1438 00de 0F       		.byte	15
 1439 00df 00       		.byte	0
 1440 00e0 00       		.byte	0
 1441 00e1 00       		.byte	0
 1442 00e2 0F       		.byte	15
 1443 00e3 FF       		.byte	-1
 1444 00e4 FF       		.byte	-1
 1445 00e5 FF       		.byte	-1
 1446 00e6 FF       		.byte	-1
 1447 00e7 FF       		.byte	-1
 1448 00e8 FF       		.byte	-1
 1449 00e9 FF       		.byte	-1
 1450 00ea FF       		.byte	-1
 1451 00eb 0F       		.byte	15
 1452 00ec 0F       		.byte	15
 1453 00ed 0F       		.byte	15
 1454 00ee FF       		.byte	-1
 1455 00ef FF       		.byte	-1
 1456              		.global	Stru_Bitmap_gbMouse
 1457              		.data
 1458              		.align	2
 1461              	Stru_Bitmap_gbMouse:
 1462 0000 10       		.byte	16
 1463 0001 04       		.byte	4
 1464 0002 0C00     		.short	12
 1465 0004 1400     		.short	20
 1466 0006 0000     		.space	2
 1467 0008 FF000000 		.word	255
 1468 000c 00000000 		.word	ucMouseMap
 1469              		.comm	ulMouseX,2,2
 1470              		.comm	ulMouseY,2,2
 1471              		.comm	ucCursorBackUp,120,4
 1472              		.text
 1473              		.align	2
 1474              		.global	BitmapView
 1476              	BitmapView:
 1477              	.LFB0:
   1:../Bmp.c      **** /*********************************************************************************************
   2:../Bmp.c      **** * Fichero:	Bmp.c
   3:../Bmp.c      **** * Autor:	
   4:../Bmp.c      **** * Descrip:	Funciones de control y visualizacion del LCD
   5:../Bmp.c      **** * Version:	
   6:../Bmp.c      **** *********************************************************************************************/
   7:../Bmp.c      **** 
   8:../Bmp.c      **** /*--- Archivos cabecera ---*/
   9:../Bmp.c      **** #include "bmp.h"
  10:../Bmp.c      **** #include "def.h"
  11:../Bmp.c      **** #include "lcd.h"
  12:../Bmp.c      **** 
  13:../Bmp.c      **** /*--- variables globales ---*/
  14:../Bmp.c      **** /* mapa de bits del cursor del raton */
  15:../Bmp.c      **** const INT8U ucMouseMap[] = {
  16:../Bmp.c      **** BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  17:../Bmp.c      **** BLACK,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  18:../Bmp.c      **** BLACK,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  19:../Bmp.c      **** BLACK,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, T
  20:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, TRANSPARENCY, T
  21:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        BLACK,        TRANSPARENCY, T
  22:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        BLACK,        T
  23:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        B
  24:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  25:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  26:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        W
  27:../Bmp.c      **** BLACK,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        WHITE,        B
  28:../Bmp.c      **** BLACK,        WHITE,        WHITE,        BLACK,        WHITE,        WHITE,        WHITE,        B
  29:../Bmp.c      **** BLACK,        WHITE,        BLACK,        TRANSPARENCY, BLACK,        WHITE,        WHITE,        W
  30:../Bmp.c      **** BLACK,        BLACK,        TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        WHITE,        W
  31:../Bmp.c      **** BLACK,        TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        W
  32:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        WHITE,        W
  33:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        W
  34:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, BLACK,        W
  35:../Bmp.c      **** TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, TRANSPARENCY, B
  36:../Bmp.c      **** };
  37:../Bmp.c      **** 
  38:../Bmp.c      **** STRU_BITMAP Stru_Bitmap_gbMouse = {0x10, 4, 12, 20, TRANSPARENCY, (INT8U *)ucMouseMap};
  39:../Bmp.c      **** 
  40:../Bmp.c      **** INT16U ulMouseX;
  41:../Bmp.c      **** INT16U ulMouseY;
  42:../Bmp.c      **** INT8U ucCursorBackUp[20][12/2];
  43:../Bmp.c      **** 
  44:../Bmp.c      **** /*--- codigo de funcion ---*/
  45:../Bmp.c      **** /*********************************************************************************************
  46:../Bmp.c      **** * name:		BitmapView()
  47:../Bmp.c      **** * func:		display bitmap
  48:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
  49:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
  50:../Bmp.c      **** * ret:		none
  51:../Bmp.c      **** * modify:
  52:../Bmp.c      **** * comment:		
  53:../Bmp.c      **** *********************************************************************************************/
  54:../Bmp.c      **** void BitmapView (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
  55:../Bmp.c      **** {
 1478              		.loc 1 55 0
 1479              		.cfi_startproc
 1480              		@ Function supports interworking.
 1481              		@ args = 16, pretend = 8, frame = 24
 1482              		@ frame_needed = 1, uses_anonymous_args = 0
 1483 0000 0DC0A0E1 		mov	ip, sp
 1484              	.LCFI0:
 1485              		.cfi_def_cfa_register 12
 1486 0004 08D04DE2 		sub	sp, sp, #8
 1487 0008 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1488 000c 0CB04CE2 		sub	fp, ip, #12
 1489              		.cfi_offset 14, -16
 1490              		.cfi_offset 13, -20
 1491              		.cfi_offset 11, -24
 1492              	.LCFI1:
 1493              		.cfi_def_cfa 11, 12
 1494 0010 18D04DE2 		sub	sp, sp, #24
 1495 0014 04C08BE2 		add	ip, fp, #4
 1496 0018 0C008CE8 		stmia	ip, {r2, r3}
 1497 001c BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 1498 0020 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
  56:../Bmp.c      **** 	INT32U i, j;
  57:../Bmp.c      **** 	INT8U ucColor;
  58:../Bmp.c      **** 	
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1499              		.loc 1 59 0
 1500 0024 0030A0E3 		mov	r3, #0
 1501 0028 10300BE5 		str	r3, [fp, #-16]
 1502 002c 4E0000EA 		b	.L2
 1503              	.L6:
  60:../Bmp.c      **** 	{
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1504              		.loc 1 61 0
 1505 0030 0030A0E3 		mov	r3, #0
 1506 0034 14300BE5 		str	r3, [fp, #-20]
 1507 0038 430000EA 		b	.L3
 1508              	.L5:
  62:../Bmp.c      **** 		{
  63:../Bmp.c      **** 			if ((ucColor = *(INT8U*)(Stru_Bitmap.pucStart + i * Stru_Bitmap.usWidth + j)) != TRANSPARENCY)
 1509              		.loc 1 63 0
 1510 003c 10209BE5 		ldr	r2, [fp, #16]
 1511 0040 B630DBE1 		ldrh	r3, [fp, #6]
 1512 0044 10101BE5 		ldr	r1, [fp, #-16]
 1513 0048 930101E0 		mul	r1, r3, r1
 1514 004c 14301BE5 		ldr	r3, [fp, #-20]
 1515 0050 033081E0 		add	r3, r1, r3
 1516 0054 033082E0 		add	r3, r2, r3
 1517 0058 0030D3E5 		ldrb	r3, [r3, #0]
 1518 005c 15304BE5 		strb	r3, [fp, #-21]
 1519 0060 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1520 0064 FF0053E3 		cmp	r3, #255
 1521 0068 3400000A 		beq	.L4
  64:../Bmp.c      **** 			{
  65:../Bmp.c      **** 				LCD_PutPixel(x + j, y + i, ucColor); 
 1522              		.loc 1 65 0
 1523 006c B0225BE1 		ldrh	r2, [fp, #-32]
 1524 0070 10301BE5 		ldr	r3, [fp, #-16]
 1525 0074 032082E0 		add	r2, r2, r3
 1526 0078 0230A0E1 		mov	r3, r2
 1527 007c 0331A0E1 		mov	r3, r3, asl #2
 1528 0080 023083E0 		add	r3, r3, r2
 1529 0084 0333A0E1 		mov	r3, r3, asl #6
 1530 0088 A320A0E1 		mov	r2, r3, lsr #1
 1531 008c BE115BE1 		ldrh	r1, [fp, #-30]
 1532 0090 14301BE5 		ldr	r3, [fp, #-20]
 1533 0094 033081E0 		add	r3, r1, r3
 1534 0098 A331A0E1 		mov	r3, r3, lsr #3
 1535 009c 0331A0E1 		mov	r3, r3, asl #2
 1536 00a0 033082E0 		add	r3, r2, r3
 1537 00a4 C33683E2 		add	r3, r3, #204472320
 1538 00a8 963C83E2 		add	r3, r3, #38400
 1539 00ac 0310A0E1 		mov	r1, r3
 1540 00b0 B0225BE1 		ldrh	r2, [fp, #-32]
 1541 00b4 10301BE5 		ldr	r3, [fp, #-16]
 1542 00b8 032082E0 		add	r2, r2, r3
 1543 00bc 0230A0E1 		mov	r3, r2
 1544 00c0 0331A0E1 		mov	r3, r3, asl #2
 1545 00c4 023083E0 		add	r3, r3, r2
 1546 00c8 0333A0E1 		mov	r3, r3, asl #6
 1547 00cc A320A0E1 		mov	r2, r3, lsr #1
 1548 00d0 BE015BE1 		ldrh	r0, [fp, #-30]
 1549 00d4 14301BE5 		ldr	r3, [fp, #-20]
 1550 00d8 033080E0 		add	r3, r0, r3
 1551 00dc A331A0E1 		mov	r3, r3, lsr #3
 1552 00e0 0331A0E1 		mov	r3, r3, asl #2
 1553 00e4 033082E0 		add	r3, r2, r3
 1554 00e8 C33683E2 		add	r3, r3, #204472320
 1555 00ec 963C83E2 		add	r3, r3, #38400
 1556 00f0 002093E5 		ldr	r2, [r3, #0]
 1557 00f4 BE015BE1 		ldrh	r0, [fp, #-30]
 1558 00f8 14301BE5 		ldr	r3, [fp, #-20]
 1559 00fc 033080E0 		add	r3, r0, r3
 1560 0100 073003E2 		and	r3, r3, #7
 1561 0104 0331A0E1 		mov	r3, r3, asl #2
 1562 0108 0F02A0E3 		mov	r0, #-268435456
 1563 010c 3033A0E1 		mov	r3, r0, lsr r3
 1564 0110 0330E0E1 		mvn	r3, r3
 1565 0114 032002E0 		and	r2, r2, r3
 1566 0118 15005BE5 		ldrb	r0, [fp, #-21]	@ zero_extendqisi2
 1567 011c BEC15BE1 		ldrh	ip, [fp, #-30]
 1568 0120 14301BE5 		ldr	r3, [fp, #-20]
 1569 0124 03308CE0 		add	r3, ip, r3
 1570 0128 0330E0E1 		mvn	r3, r3
 1571 012c 073003E2 		and	r3, r3, #7
 1572 0130 0331A0E1 		mov	r3, r3, asl #2
 1573 0134 1033A0E1 		mov	r3, r0, asl r3
 1574 0138 033082E1 		orr	r3, r2, r3
 1575 013c 003081E5 		str	r3, [r1, #0]
 1576              	.L4:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1577              		.loc 1 61 0
 1578 0140 14301BE5 		ldr	r3, [fp, #-20]
 1579 0144 013083E2 		add	r3, r3, #1
 1580 0148 14300BE5 		str	r3, [fp, #-20]
 1581              	.L3:
  61:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j++)
 1582              		.loc 1 61 0 is_stmt 0 discriminator 1
 1583 014c B630DBE1 		ldrh	r3, [fp, #6]
 1584 0150 0320A0E1 		mov	r2, r3
 1585 0154 14301BE5 		ldr	r3, [fp, #-20]
 1586 0158 030052E1 		cmp	r2, r3
 1587 015c B6FFFF8A 		bhi	.L5
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1588              		.loc 1 59 0 is_stmt 1
 1589 0160 10301BE5 		ldr	r3, [fp, #-16]
 1590 0164 013083E2 		add	r3, r3, #1
 1591 0168 10300BE5 		str	r3, [fp, #-16]
 1592              	.L2:
  59:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1593              		.loc 1 59 0 is_stmt 0 discriminator 1
 1594 016c B830DBE1 		ldrh	r3, [fp, #8]
 1595 0170 0320A0E1 		mov	r2, r3
 1596 0174 10301BE5 		ldr	r3, [fp, #-16]
 1597 0178 030052E1 		cmp	r2, r3
 1598 017c ABFFFF8A 		bhi	.L6
  66:../Bmp.c      **** 			}
  67:../Bmp.c      **** 		}
  68:../Bmp.c      **** 	}
  69:../Bmp.c      **** }
 1599              		.loc 1 69 0 is_stmt 1
 1600 0180 0CD04BE2 		sub	sp, fp, #12
 1601 0184 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1602 0188 1EFF2FE1 		bx	lr
 1603              		.cfi_endproc
 1604              	.LFE0:
 1606              		.align	2
 1607              		.global	BitmapPush
 1609              	BitmapPush:
 1610              	.LFB1:
  70:../Bmp.c      **** 
  71:../Bmp.c      **** /*********************************************************************************************
  72:../Bmp.c      **** * name:		BitmapPush()
  73:../Bmp.c      **** * func:		push bitmap data into LCD active buffer
  74:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
  75:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
  76:../Bmp.c      **** * ret:		none
  77:../Bmp.c      **** * modify:
  78:../Bmp.c      **** * comment:		
  79:../Bmp.c      **** *********************************************************************************************/
  80:../Bmp.c      **** void BitmapPush (INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
  81:../Bmp.c      **** {
 1611              		.loc 1 81 0
 1612              		.cfi_startproc
 1613              		@ Function supports interworking.
 1614              		@ args = 16, pretend = 8, frame = 16
 1615              		@ frame_needed = 1, uses_anonymous_args = 0
 1616 018c 0DC0A0E1 		mov	ip, sp
 1617              	.LCFI2:
 1618              		.cfi_def_cfa_register 12
 1619 0190 08D04DE2 		sub	sp, sp, #8
 1620 0194 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1621 0198 0CB04CE2 		sub	fp, ip, #12
 1622              		.cfi_offset 14, -16
 1623              		.cfi_offset 13, -20
 1624              		.cfi_offset 11, -24
 1625              	.LCFI3:
 1626              		.cfi_def_cfa 11, 12
 1627 019c 10D04DE2 		sub	sp, sp, #16
 1628 01a0 04C08BE2 		add	ip, fp, #4
 1629 01a4 0C008CE8 		stmia	ip, {r2, r3}
 1630 01a8 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 1631 01ac B8114BE1 		strh	r1, [fp, #-24]	@ movhi
  82:../Bmp.c      **** 	INT32U i, j;
  83:../Bmp.c      **** 
  84:../Bmp.c      **** 	ulMouseX = x; 
 1632              		.loc 1 84 0
 1633 01b0 34329FE5 		ldr	r3, .L14
 1634 01b4 B6215BE1 		ldrh	r2, [fp, #-22]	@ movhi
 1635 01b8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  85:../Bmp.c      **** 	ulMouseY = y;
 1636              		.loc 1 85 0
 1637 01bc 2C329FE5 		ldr	r3, .L14+4
 1638 01c0 B8215BE1 		ldrh	r2, [fp, #-24]	@ movhi
 1639 01c4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1640              		.loc 1 86 0
 1641 01c8 0030A0E3 		mov	r3, #0
 1642 01cc 10300BE5 		str	r3, [fp, #-16]
 1643 01d0 7D0000EA 		b	.L8
 1644              	.L13:
  87:../Bmp.c      **** 	{
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1645              		.loc 1 88 0
 1646 01d4 0030A0E3 		mov	r3, #0
 1647 01d8 14300BE5 		str	r3, [fp, #-20]
 1648 01dc 720000EA 		b	.L9
 1649              	.L12:
  89:../Bmp.c      **** 		{
  90:../Bmp.c      **** 			if ((x + j)%2)
 1650              		.loc 1 90 0
 1651 01e0 B6215BE1 		ldrh	r2, [fp, #-22]
 1652 01e4 14301BE5 		ldr	r3, [fp, #-20]
 1653 01e8 033082E0 		add	r3, r2, r3
 1654 01ec 013003E2 		and	r3, r3, #1
 1655 01f0 FF3003E2 		and	r3, r3, #255
 1656 01f4 000053E3 		cmp	r3, #0
 1657 01f8 4400000A 		beq	.L10
  91:../Bmp.c      **** 			{
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1658              		.loc 1 92 0
 1659 01fc 14301BE5 		ldr	r3, [fp, #-20]
 1660 0200 A3C0A0E1 		mov	ip, r3, lsr #1
  93:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4  + 3 - ((x + j)%8) /
 1661              		.loc 1 93 0
 1662 0204 B8215BE1 		ldrh	r2, [fp, #-24]
 1663 0208 10301BE5 		ldr	r3, [fp, #-16]
 1664 020c 032082E0 		add	r2, r2, r3
 1665 0210 0230A0E1 		mov	r3, r2
 1666 0214 0331A0E1 		mov	r3, r3, asl #2
 1667 0218 023083E0 		add	r3, r3, r2
 1668 021c 0333A0E1 		mov	r3, r3, asl #6
 1669 0220 A320A0E1 		mov	r2, r3, lsr #1
 1670 0224 B6115BE1 		ldrh	r1, [fp, #-22]
 1671 0228 14301BE5 		ldr	r3, [fp, #-20]
 1672 022c 033081E0 		add	r3, r1, r3
 1673 0230 A331A0E1 		mov	r3, r3, lsr #3
 1674 0234 0331A0E1 		mov	r3, r3, asl #2
 1675 0238 032082E0 		add	r2, r2, r3
 1676 023c B6115BE1 		ldrh	r1, [fp, #-22]
 1677 0240 14301BE5 		ldr	r3, [fp, #-20]
 1678 0244 033081E0 		add	r3, r1, r3
 1679 0248 073003E2 		and	r3, r3, #7
 1680 024c A330A0E1 		mov	r3, r3, lsr #1
 1681 0250 003063E2 		rsb	r3, r3, #0
 1682 0254 033082E0 		add	r3, r2, r3
 1683 0258 C33683E2 		add	r3, r3, #204472320
 1684 025c 033083E2 		add	r3, r3, #3
 1685 0260 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1686 0264 0332A0E1 		mov	r3, r3, asl #4
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1687              		.loc 1 92 0
 1688 0268 FF1003E2 		and	r1, r3, #255
  94:../Bmp.c      **** 				(((*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j+1) / 8 * 4  + 3 - ((x + j+1)%
 1689              		.loc 1 94 0
 1690 026c B8215BE1 		ldrh	r2, [fp, #-24]
 1691 0270 10301BE5 		ldr	r3, [fp, #-16]
 1692 0274 032082E0 		add	r2, r2, r3
 1693 0278 0230A0E1 		mov	r3, r2
 1694 027c 0331A0E1 		mov	r3, r3, asl #2
 1695 0280 023083E0 		add	r3, r3, r2
 1696 0284 0333A0E1 		mov	r3, r3, asl #6
 1697 0288 A320A0E1 		mov	r2, r3, lsr #1
 1698 028c B6015BE1 		ldrh	r0, [fp, #-22]
 1699 0290 14301BE5 		ldr	r3, [fp, #-20]
 1700 0294 033080E0 		add	r3, r0, r3
 1701 0298 013083E2 		add	r3, r3, #1
 1702 029c A331A0E1 		mov	r3, r3, lsr #3
 1703 02a0 0331A0E1 		mov	r3, r3, asl #2
 1704 02a4 032082E0 		add	r2, r2, r3
 1705 02a8 B6015BE1 		ldrh	r0, [fp, #-22]
 1706 02ac 14301BE5 		ldr	r3, [fp, #-20]
 1707 02b0 033080E0 		add	r3, r0, r3
 1708 02b4 013083E2 		add	r3, r3, #1
 1709 02b8 073003E2 		and	r3, r3, #7
 1710 02bc A330A0E1 		mov	r3, r3, lsr #1
 1711 02c0 003063E2 		rsb	r3, r3, #0
 1712 02c4 033082E0 		add	r3, r2, r3
 1713 02c8 C33683E2 		add	r3, r3, #204472320
 1714 02cc 033083E2 		add	r3, r3, #3
 1715 02d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  92:../Bmp.c      **** 				ucCursorBackUp[i][j/2] =
 1716              		.loc 1 92 0
 1717 02d4 2332A0E1 		mov	r3, r3, lsr #4
 1718 02d8 FF3003E2 		and	r3, r3, #255
 1719 02dc 033081E0 		add	r3, r1, r3
 1720 02e0 FF1003E2 		and	r1, r3, #255
 1721 02e4 08019FE5 		ldr	r0, .L14+8
 1722 02e8 10201BE5 		ldr	r2, [fp, #-16]
 1723 02ec 0230A0E1 		mov	r3, r2
 1724 02f0 8330A0E1 		mov	r3, r3, asl #1
 1725 02f4 023083E0 		add	r3, r3, r2
 1726 02f8 8330A0E1 		mov	r3, r3, asl #1
 1727 02fc 0C3083E0 		add	r3, r3, ip
 1728 0300 033080E0 		add	r3, r0, r3
 1729 0304 0120A0E1 		mov	r2, r1
 1730 0308 0020C3E5 		strb	r2, [r3, #0]
 1731 030c 230000EA 		b	.L11
 1732              	.L10:
  95:../Bmp.c      **** 			}
  96:../Bmp.c      **** 			else
  97:../Bmp.c      **** 			{
  98:../Bmp.c      **** 				ucCursorBackUp[i][j/2] = (*(INT8U*)(LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 *
 1733              		.loc 1 98 0
 1734 0310 14301BE5 		ldr	r3, [fp, #-20]
 1735 0314 A3C0A0E1 		mov	ip, r3, lsr #1
 1736 0318 B8215BE1 		ldrh	r2, [fp, #-24]
 1737 031c 10301BE5 		ldr	r3, [fp, #-16]
 1738 0320 032082E0 		add	r2, r2, r3
 1739 0324 0230A0E1 		mov	r3, r2
 1740 0328 0331A0E1 		mov	r3, r3, asl #2
 1741 032c 023083E0 		add	r3, r3, r2
 1742 0330 0333A0E1 		mov	r3, r3, asl #6
 1743 0334 A320A0E1 		mov	r2, r3, lsr #1
 1744 0338 B6115BE1 		ldrh	r1, [fp, #-22]
 1745 033c 14301BE5 		ldr	r3, [fp, #-20]
 1746 0340 033081E0 		add	r3, r1, r3
 1747 0344 A331A0E1 		mov	r3, r3, lsr #3
 1748 0348 0331A0E1 		mov	r3, r3, asl #2
 1749 034c 032082E0 		add	r2, r2, r3
 1750 0350 B6115BE1 		ldrh	r1, [fp, #-22]
 1751 0354 14301BE5 		ldr	r3, [fp, #-20]
 1752 0358 033081E0 		add	r3, r1, r3
 1753 035c 073003E2 		and	r3, r3, #7
 1754 0360 A330A0E1 		mov	r3, r3, lsr #1
 1755 0364 003063E2 		rsb	r3, r3, #0
 1756 0368 033082E0 		add	r3, r2, r3
 1757 036c C33683E2 		add	r3, r3, #204472320
 1758 0370 033083E2 		add	r3, r3, #3
 1759 0374 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1760 0378 74009FE5 		ldr	r0, .L14+8
 1761 037c 10201BE5 		ldr	r2, [fp, #-16]
 1762 0380 0230A0E1 		mov	r3, r2
 1763 0384 8330A0E1 		mov	r3, r3, asl #1
 1764 0388 023083E0 		add	r3, r3, r2
 1765 038c 8330A0E1 		mov	r3, r3, asl #1
 1766 0390 0C3083E0 		add	r3, r3, ip
 1767 0394 033080E0 		add	r3, r0, r3
 1768 0398 0120A0E1 		mov	r2, r1
 1769 039c 0020C3E5 		strb	r2, [r3, #0]
 1770              	.L11:
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1771              		.loc 1 88 0
 1772 03a0 14301BE5 		ldr	r3, [fp, #-20]
 1773 03a4 023083E2 		add	r3, r3, #2
 1774 03a8 14300BE5 		str	r3, [fp, #-20]
 1775              	.L9:
  88:../Bmp.c      **** 		for (j = 0; j < Stru_Bitmap.usWidth; j+=2)
 1776              		.loc 1 88 0 is_stmt 0 discriminator 1
 1777 03ac B630DBE1 		ldrh	r3, [fp, #6]
 1778 03b0 0320A0E1 		mov	r2, r3
 1779 03b4 14301BE5 		ldr	r3, [fp, #-20]
 1780 03b8 030052E1 		cmp	r2, r3
 1781 03bc 87FFFF8A 		bhi	.L12
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1782              		.loc 1 86 0 is_stmt 1
 1783 03c0 10301BE5 		ldr	r3, [fp, #-16]
 1784 03c4 013083E2 		add	r3, r3, #1
 1785 03c8 10300BE5 		str	r3, [fp, #-16]
 1786              	.L8:
  86:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1787              		.loc 1 86 0 is_stmt 0 discriminator 1
 1788 03cc B830DBE1 		ldrh	r3, [fp, #8]
 1789 03d0 0320A0E1 		mov	r2, r3
 1790 03d4 10301BE5 		ldr	r3, [fp, #-16]
 1791 03d8 030052E1 		cmp	r2, r3
 1792 03dc 7CFFFF8A 		bhi	.L13
  99:../Bmp.c      **** 			}
 100:../Bmp.c      **** 		}
 101:../Bmp.c      **** 	}
 102:../Bmp.c      **** }
 1793              		.loc 1 102 0 is_stmt 1
 1794 03e0 0CD04BE2 		sub	sp, fp, #12
 1795 03e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1796 03e8 1EFF2FE1 		bx	lr
 1797              	.L15:
 1798              		.align	2
 1799              	.L14:
 1800 03ec 00000000 		.word	ulMouseX
 1801 03f0 00000000 		.word	ulMouseY
 1802 03f4 00000000 		.word	ucCursorBackUp
 1803              		.cfi_endproc
 1804              	.LFE1:
 1806              		.align	2
 1807              		.global	BitmapPop
 1809              	BitmapPop:
 1810              	.LFB2:
 103:../Bmp.c      **** 
 104:../Bmp.c      **** /*********************************************************************************************
 105:../Bmp.c      **** * name:		BitmapPop()
 106:../Bmp.c      **** * func:		pop bitmap data into LCD active buffer
 107:../Bmp.c      **** * para:		x,y -- pot's X-Y coordinate 
 108:../Bmp.c      **** *			Stru_Bitmap -- bitmap struct
 109:../Bmp.c      **** * ret:		none
 110:../Bmp.c      **** * modify:
 111:../Bmp.c      **** * comment:		
 112:../Bmp.c      **** *********************************************************************************************/
 113:../Bmp.c      **** void BitmapPop(INT16U x, INT16U y, STRU_BITMAP Stru_Bitmap)
 114:../Bmp.c      **** {
 1811              		.loc 1 114 0
 1812              		.cfi_startproc
 1813              		@ Function supports interworking.
 1814              		@ args = 16, pretend = 8, frame = 24
 1815              		@ frame_needed = 1, uses_anonymous_args = 0
 1816 03f8 0DC0A0E1 		mov	ip, sp
 1817              	.LCFI4:
 1818              		.cfi_def_cfa_register 12
 1819 03fc 08D04DE2 		sub	sp, sp, #8
 1820 0400 10D82DE9 		stmfd	sp!, {r4, fp, ip, lr, pc}
 1821 0404 0CB04CE2 		sub	fp, ip, #12
 1822              		.cfi_offset 14, -16
 1823              		.cfi_offset 13, -20
 1824              		.cfi_offset 11, -24
 1825              		.cfi_offset 4, -28
 1826              	.LCFI5:
 1827              		.cfi_def_cfa 11, 12
 1828 0408 1CD04DE2 		sub	sp, sp, #28
 1829 040c 04C08BE2 		add	ip, fp, #4
 1830 0410 0C008CE8 		stmia	ip, {r2, r3}
 1831 0414 B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 1832 0418 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 115:../Bmp.c      **** 	INT32U i, j;
 116:../Bmp.c      **** 	INT32U ulAddr, ulAddr1;
 117:../Bmp.c      **** 
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1833              		.loc 1 118 0
 1834 041c 0030A0E3 		mov	r3, #0
 1835 0420 18300BE5 		str	r3, [fp, #-24]
 1836 0424 8D0000EA 		b	.L17
 1837              	.L22:
 119:../Bmp.c      **** 	{
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1838              		.loc 1 120 0
 1839 0428 0030A0E3 		mov	r3, #0
 1840 042c 1C300BE5 		str	r3, [fp, #-28]
 1841 0430 820000EA 		b	.L18
 1842              	.L21:
 121:../Bmp.c      **** 		{
 122:../Bmp.c      **** 			ulAddr = LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j) / 8 * 4 + 3 - ((x + j)%8) / 2;
 1843              		.loc 1 122 0
 1844 0434 B8225BE1 		ldrh	r2, [fp, #-40]
 1845 0438 18301BE5 		ldr	r3, [fp, #-24]
 1846 043c 032082E0 		add	r2, r2, r3
 1847 0440 0230A0E1 		mov	r3, r2
 1848 0444 0331A0E1 		mov	r3, r3, asl #2
 1849 0448 023083E0 		add	r3, r3, r2
 1850 044c 0333A0E1 		mov	r3, r3, asl #6
 1851 0450 A320A0E1 		mov	r2, r3, lsr #1
 1852 0454 B6125BE1 		ldrh	r1, [fp, #-38]
 1853 0458 1C301BE5 		ldr	r3, [fp, #-28]
 1854 045c 033081E0 		add	r3, r1, r3
 1855 0460 A331A0E1 		mov	r3, r3, lsr #3
 1856 0464 0331A0E1 		mov	r3, r3, asl #2
 1857 0468 032082E0 		add	r2, r2, r3
 1858 046c B6125BE1 		ldrh	r1, [fp, #-38]
 1859 0470 1C301BE5 		ldr	r3, [fp, #-28]
 1860 0474 033081E0 		add	r3, r1, r3
 1861 0478 073003E2 		and	r3, r3, #7
 1862 047c A330A0E1 		mov	r3, r3, lsr #1
 1863 0480 003063E2 		rsb	r3, r3, #0
 1864 0484 033082E0 		add	r3, r2, r3
 1865 0488 C33683E2 		add	r3, r3, #204472320
 1866 048c 033083E2 		add	r3, r3, #3
 1867 0490 20300BE5 		str	r3, [fp, #-32]
 123:../Bmp.c      **** 			ulAddr1 =LCD_ACTIVE_BUFFER + (y + i) * SCR_XSIZE / 2 + (x + j + 1) / 8 * 4 + 3 - ((x + j + 1)%8)
 1868              		.loc 1 123 0
 1869 0494 B8225BE1 		ldrh	r2, [fp, #-40]
 1870 0498 18301BE5 		ldr	r3, [fp, #-24]
 1871 049c 032082E0 		add	r2, r2, r3
 1872 04a0 0230A0E1 		mov	r3, r2
 1873 04a4 0331A0E1 		mov	r3, r3, asl #2
 1874 04a8 023083E0 		add	r3, r3, r2
 1875 04ac 0333A0E1 		mov	r3, r3, asl #6
 1876 04b0 A320A0E1 		mov	r2, r3, lsr #1
 1877 04b4 B6125BE1 		ldrh	r1, [fp, #-38]
 1878 04b8 1C301BE5 		ldr	r3, [fp, #-28]
 1879 04bc 033081E0 		add	r3, r1, r3
 1880 04c0 013083E2 		add	r3, r3, #1
 1881 04c4 A331A0E1 		mov	r3, r3, lsr #3
 1882 04c8 0331A0E1 		mov	r3, r3, asl #2
 1883 04cc 032082E0 		add	r2, r2, r3
 1884 04d0 B6125BE1 		ldrh	r1, [fp, #-38]
 1885 04d4 1C301BE5 		ldr	r3, [fp, #-28]
 1886 04d8 033081E0 		add	r3, r1, r3
 1887 04dc 013083E2 		add	r3, r3, #1
 1888 04e0 073003E2 		and	r3, r3, #7
 1889 04e4 A330A0E1 		mov	r3, r3, lsr #1
 1890 04e8 003063E2 		rsb	r3, r3, #0
 1891 04ec 033082E0 		add	r3, r2, r3
 1892 04f0 C33683E2 		add	r3, r3, #204472320
 1893 04f4 033083E2 		add	r3, r3, #3
 1894 04f8 24300BE5 		str	r3, [fp, #-36]
 124:../Bmp.c      **** 			if ((x + j)%2)
 1895              		.loc 1 124 0
 1896 04fc B6225BE1 		ldrh	r2, [fp, #-38]
 1897 0500 1C301BE5 		ldr	r3, [fp, #-28]
 1898 0504 033082E0 		add	r3, r2, r3
 1899 0508 013003E2 		and	r3, r3, #1
 1900 050c FF3003E2 		and	r3, r3, #255
 1901 0510 000053E3 		cmp	r3, #0
 1902 0514 3900000A 		beq	.L19
 125:../Bmp.c      **** 			{
 126:../Bmp.c      **** 				
 127:../Bmp.c      **** 				(*(INT8U*)ulAddr) &= 0xf0;
 1903              		.loc 1 127 0
 1904 0518 20301BE5 		ldr	r3, [fp, #-32]
 1905 051c 20201BE5 		ldr	r2, [fp, #-32]
 1906 0520 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 1907 0524 0F20C2E3 		bic	r2, r2, #15
 1908 0528 FF2002E2 		and	r2, r2, #255
 1909 052c 0020C3E5 		strb	r2, [r3, #0]
 128:../Bmp.c      **** 				(*(INT8U*)ulAddr) |= ((ucCursorBackUp[i][j/2] >> 4) & 0x0f);
 1910              		.loc 1 128 0
 1911 0530 20101BE5 		ldr	r1, [fp, #-32]
 1912 0534 20301BE5 		ldr	r3, [fp, #-32]
 1913 0538 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1914 053c FF0003E2 		and	r0, r3, #255
 1915 0540 1C301BE5 		ldr	r3, [fp, #-28]
 1916 0544 A340A0E1 		mov	r4, r3, lsr #1
 1917 0548 30C19FE5 		ldr	ip, .L23
 1918 054c 18201BE5 		ldr	r2, [fp, #-24]
 1919 0550 0230A0E1 		mov	r3, r2
 1920 0554 8330A0E1 		mov	r3, r3, asl #1
 1921 0558 023083E0 		add	r3, r3, r2
 1922 055c 8330A0E1 		mov	r3, r3, asl #1
 1923 0560 043083E0 		add	r3, r3, r4
 1924 0564 03308CE0 		add	r3, ip, r3
 1925 0568 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1926 056c 2332A0E1 		mov	r3, r3, lsr #4
 1927 0570 FF3003E2 		and	r3, r3, #255
 1928 0574 FF3003E2 		and	r3, r3, #255
 1929 0578 0020A0E1 		mov	r2, r0
 1930 057c 033082E1 		orr	r3, r2, r3
 1931 0580 FF3003E2 		and	r3, r3, #255
 1932 0584 FF3003E2 		and	r3, r3, #255
 1933 0588 0030C1E5 		strb	r3, [r1, #0]
 129:../Bmp.c      **** 				(*(INT8U*)ulAddr1) &= 0x0f;
 1934              		.loc 1 129 0
 1935 058c 24301BE5 		ldr	r3, [fp, #-36]
 1936 0590 24201BE5 		ldr	r2, [fp, #-36]
 1937 0594 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 1938 0598 0F2002E2 		and	r2, r2, #15
 1939 059c FF2002E2 		and	r2, r2, #255
 1940 05a0 0020C3E5 		strb	r2, [r3, #0]
 130:../Bmp.c      **** 				(*(INT8U*)ulAddr1) |= ((ucCursorBackUp[i][j/2] << 4) & 0xf0);
 1941              		.loc 1 130 0
 1942 05a4 24101BE5 		ldr	r1, [fp, #-36]
 1943 05a8 24301BE5 		ldr	r3, [fp, #-36]
 1944 05ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1945 05b0 FF0003E2 		and	r0, r3, #255
 1946 05b4 1C301BE5 		ldr	r3, [fp, #-28]
 1947 05b8 A340A0E1 		mov	r4, r3, lsr #1
 1948 05bc BCC09FE5 		ldr	ip, .L23
 1949 05c0 18201BE5 		ldr	r2, [fp, #-24]
 1950 05c4 0230A0E1 		mov	r3, r2
 1951 05c8 8330A0E1 		mov	r3, r3, asl #1
 1952 05cc 023083E0 		add	r3, r3, r2
 1953 05d0 8330A0E1 		mov	r3, r3, asl #1
 1954 05d4 043083E0 		add	r3, r3, r4
 1955 05d8 03308CE0 		add	r3, ip, r3
 1956 05dc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1957 05e0 0332A0E1 		mov	r3, r3, asl #4
 1958 05e4 FF3003E2 		and	r3, r3, #255
 1959 05e8 0020A0E1 		mov	r2, r0
 1960 05ec 033082E1 		orr	r3, r2, r3
 1961 05f0 FF3003E2 		and	r3, r3, #255
 1962 05f4 FF3003E2 		and	r3, r3, #255
 1963 05f8 0030C1E5 		strb	r3, [r1, #0]
 1964 05fc 0C0000EA 		b	.L20
 1965              	.L19:
 131:../Bmp.c      **** 			}
 132:../Bmp.c      **** 			else
 133:../Bmp.c      **** 			{
 134:../Bmp.c      **** 				(*(INT8U*)ulAddr) = ucCursorBackUp[i][j/2];
 1966              		.loc 1 134 0
 1967 0600 20101BE5 		ldr	r1, [fp, #-32]
 1968 0604 1C301BE5 		ldr	r3, [fp, #-28]
 1969 0608 A3C0A0E1 		mov	ip, r3, lsr #1
 1970 060c 6C009FE5 		ldr	r0, .L23
 1971 0610 18201BE5 		ldr	r2, [fp, #-24]
 1972 0614 0230A0E1 		mov	r3, r2
 1973 0618 8330A0E1 		mov	r3, r3, asl #1
 1974 061c 023083E0 		add	r3, r3, r2
 1975 0620 8330A0E1 		mov	r3, r3, asl #1
 1976 0624 0C3083E0 		add	r3, r3, ip
 1977 0628 033080E0 		add	r3, r0, r3
 1978 062c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1979 0630 0030C1E5 		strb	r3, [r1, #0]
 1980              	.L20:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1981              		.loc 1 120 0
 1982 0634 1C301BE5 		ldr	r3, [fp, #-28]
 1983 0638 023083E2 		add	r3, r3, #2
 1984 063c 1C300BE5 		str	r3, [fp, #-28]
 1985              	.L18:
 120:../Bmp.c      **** 		for (j = 0; j <Stru_Bitmap.usWidth; j+=2)
 1986              		.loc 1 120 0 is_stmt 0 discriminator 1
 1987 0640 B630DBE1 		ldrh	r3, [fp, #6]
 1988 0644 0320A0E1 		mov	r2, r3
 1989 0648 1C301BE5 		ldr	r3, [fp, #-28]
 1990 064c 030052E1 		cmp	r2, r3
 1991 0650 77FFFF8A 		bhi	.L21
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1992              		.loc 1 118 0 is_stmt 1
 1993 0654 18301BE5 		ldr	r3, [fp, #-24]
 1994 0658 013083E2 		add	r3, r3, #1
 1995 065c 18300BE5 		str	r3, [fp, #-24]
 1996              	.L17:
 118:../Bmp.c      **** 	for (i =  0; i < Stru_Bitmap.usHeight; i++)
 1997              		.loc 1 118 0 is_stmt 0 discriminator 1
 1998 0660 B830DBE1 		ldrh	r3, [fp, #8]
 1999 0664 0320A0E1 		mov	r2, r3
 2000 0668 18301BE5 		ldr	r3, [fp, #-24]
 2001 066c 030052E1 		cmp	r2, r3
 2002 0670 6CFFFF8A 		bhi	.L22
 135:../Bmp.c      **** 			}
 136:../Bmp.c      **** 			
 137:../Bmp.c      **** 		}
 138:../Bmp.c      **** 	}
 139:../Bmp.c      **** }
 2003              		.loc 1 139 0 is_stmt 1
 2004 0674 10D04BE2 		sub	sp, fp, #16
 2005 0678 10689DE8 		ldmfd	sp, {r4, fp, sp, lr}
 2006 067c 1EFF2FE1 		bx	lr
 2007              	.L24:
 2008              		.align	2
 2009              	.L23:
 2010 0680 00000000 		.word	ucCursorBackUp
 2011              		.cfi_endproc
 2012              	.LFE2:
 2014              		.align	2
 2015              		.global	CursorInit
 2017              	CursorInit:
 2018              	.LFB3:
 140:../Bmp.c      **** 
 141:../Bmp.c      **** /*********************************************************************************************
 142:../Bmp.c      **** * name:		CursorInit()
 143:../Bmp.c      **** * func:		cursor init
 144:../Bmp.c      **** * para:		none
 145:../Bmp.c      **** * ret:		none
 146:../Bmp.c      **** * modify:
 147:../Bmp.c      **** * comment:		
 148:../Bmp.c      **** *********************************************************************************************/
 149:../Bmp.c      **** void CursorInit(void)
 150:../Bmp.c      **** {
 2019              		.loc 1 150 0
 2020              		.cfi_startproc
 2021              		@ Function supports interworking.
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 1, uses_anonymous_args = 0
 2024 0684 0DC0A0E1 		mov	ip, sp
 2025              	.LCFI6:
 2026              		.cfi_def_cfa_register 12
 2027 0688 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2028 068c 04B04CE2 		sub	fp, ip, #4
 2029              		.cfi_offset 14, -8
 2030              		.cfi_offset 13, -12
 2031              		.cfi_offset 11, -16
 2032              	.LCFI7:
 2033              		.cfi_def_cfa 11, 4
 151:../Bmp.c      **** 	ulMouseX = 0;
 2034              		.loc 1 151 0
 2035 0690 38309FE5 		ldr	r3, .L26
 2036 0694 0020A0E3 		mov	r2, #0
 2037 0698 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 152:../Bmp.c      **** 	ulMouseY = 0;
 2038              		.loc 1 152 0
 2039 069c 30309FE5 		ldr	r3, .L26+4
 2040 06a0 0020A0E3 		mov	r2, #0
 2041 06a4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 153:../Bmp.c      **** 	CursorView(ulMouseX, ulMouseY);
 2042              		.loc 1 153 0
 2043 06a8 20309FE5 		ldr	r3, .L26
 2044 06ac B020D3E1 		ldrh	r2, [r3, #0]
 2045 06b0 1C309FE5 		ldr	r3, .L26+4
 2046 06b4 B030D3E1 		ldrh	r3, [r3, #0]
 2047 06b8 0200A0E1 		mov	r0, r2
 2048 06bc 0310A0E1 		mov	r1, r3
 2049 06c0 FEFFFFEB 		bl	CursorView
 154:../Bmp.c      **** }
 2050              		.loc 1 154 0
 2051 06c4 0CD04BE2 		sub	sp, fp, #12
 2052 06c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2053 06cc 1EFF2FE1 		bx	lr
 2054              	.L27:
 2055              		.align	2
 2056              	.L26:
 2057 06d0 00000000 		.word	ulMouseX
 2058 06d4 00000000 		.word	ulMouseY
 2059              		.cfi_endproc
 2060              	.LFE3:
 2062              		.align	2
 2063              		.global	CursorPush
 2065              	CursorPush:
 2066              	.LFB4:
 155:../Bmp.c      **** 
 156:../Bmp.c      **** /*********************************************************************************************
 157:../Bmp.c      **** * name:		CursorPush()
 158:../Bmp.c      **** * func:		cursor push
 159:../Bmp.c      **** * para:		none
 160:../Bmp.c      **** * ret:		none
 161:../Bmp.c      **** * modify:
 162:../Bmp.c      **** * comment:		
 163:../Bmp.c      **** *********************************************************************************************/
 164:../Bmp.c      **** void CursorPush(INT16U x, INT16U y)
 165:../Bmp.c      **** {
 2067              		.loc 1 165 0
 2068              		.cfi_startproc
 2069              		@ Function supports interworking.
 2070              		@ args = 0, pretend = 0, frame = 8
 2071              		@ frame_needed = 1, uses_anonymous_args = 0
 2072 06d8 0DC0A0E1 		mov	ip, sp
 2073              	.LCFI8:
 2074              		.cfi_def_cfa_register 12
 2075 06dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2076 06e0 04B04CE2 		sub	fp, ip, #4
 2077              		.cfi_offset 14, -8
 2078              		.cfi_offset 13, -12
 2079              		.cfi_offset 11, -16
 2080              	.LCFI9:
 2081              		.cfi_def_cfa 11, 4
 2082 06e4 10D04DE2 		sub	sp, sp, #16
 2083 06e8 0020A0E1 		mov	r2, r0
 2084 06ec 0130A0E1 		mov	r3, r1
 2085 06f0 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 2086 06f4 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 166:../Bmp.c      **** 	BitmapPush(x, y, Stru_Bitmap_gbMouse);
 2087              		.loc 1 166 0
 2088 06f8 BEE05BE1 		ldrh	lr, [fp, #-14]
 2089 06fc B0C15BE1 		ldrh	ip, [fp, #-16]
 2090 0700 28309FE5 		ldr	r3, .L29
 2091 0704 0D20A0E1 		mov	r2, sp
 2092 0708 081083E2 		add	r1, r3, #8
 2093 070c 030091E8 		ldmia	r1, {r0, r1}
 2094 0710 030082E8 		stmia	r2, {r0, r1}
 2095 0714 0C0093E8 		ldmia	r3, {r2, r3}
 2096 0718 0E00A0E1 		mov	r0, lr
 2097 071c 0C10A0E1 		mov	r1, ip
 2098 0720 FEFFFFEB 		bl	BitmapPush
 167:../Bmp.c      **** }
 2099              		.loc 1 167 0
 2100 0724 0CD04BE2 		sub	sp, fp, #12
 2101 0728 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2102 072c 1EFF2FE1 		bx	lr
 2103              	.L30:
 2104              		.align	2
 2105              	.L29:
 2106 0730 00000000 		.word	Stru_Bitmap_gbMouse
 2107              		.cfi_endproc
 2108              	.LFE4:
 2110              		.align	2
 2111              		.global	CursorPop
 2113              	CursorPop:
 2114              	.LFB5:
 168:../Bmp.c      **** 
 169:../Bmp.c      **** /*********************************************************************************************
 170:../Bmp.c      **** * name:		CursorPop()
 171:../Bmp.c      **** * func:		cursor pop
 172:../Bmp.c      **** * para:		none
 173:../Bmp.c      **** * ret:		none
 174:../Bmp.c      **** * modify:
 175:../Bmp.c      **** * comment:		
 176:../Bmp.c      **** *********************************************************************************************/
 177:../Bmp.c      **** void CursorPop()
 178:../Bmp.c      **** {
 2115              		.loc 1 178 0
 2116              		.cfi_startproc
 2117              		@ Function supports interworking.
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 1, uses_anonymous_args = 0
 2120 0734 0DC0A0E1 		mov	ip, sp
 2121              	.LCFI10:
 2122              		.cfi_def_cfa_register 12
 2123 0738 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2124 073c 04B04CE2 		sub	fp, ip, #4
 2125              		.cfi_offset 14, -8
 2126              		.cfi_offset 13, -12
 2127              		.cfi_offset 11, -16
 2128              	.LCFI11:
 2129              		.cfi_def_cfa 11, 4
 2130 0740 08D04DE2 		sub	sp, sp, #8
 179:../Bmp.c      **** 	BitmapPop(ulMouseX, ulMouseY, Stru_Bitmap_gbMouse);
 2131              		.loc 1 179 0
 2132 0744 38309FE5 		ldr	r3, .L32
 2133 0748 B0E0D3E1 		ldrh	lr, [r3, #0]
 2134 074c 34309FE5 		ldr	r3, .L32+4
 2135 0750 B0C0D3E1 		ldrh	ip, [r3, #0]
 2136 0754 30309FE5 		ldr	r3, .L32+8
 2137 0758 0D20A0E1 		mov	r2, sp
 2138 075c 081083E2 		add	r1, r3, #8
 2139 0760 030091E8 		ldmia	r1, {r0, r1}
 2140 0764 030082E8 		stmia	r2, {r0, r1}
 2141 0768 0C0093E8 		ldmia	r3, {r2, r3}
 2142 076c 0E00A0E1 		mov	r0, lr
 2143 0770 0C10A0E1 		mov	r1, ip
 2144 0774 FEFFFFEB 		bl	BitmapPop
 180:../Bmp.c      **** }
 2145              		.loc 1 180 0
 2146 0778 0CD04BE2 		sub	sp, fp, #12
 2147 077c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2148 0780 1EFF2FE1 		bx	lr
 2149              	.L33:
 2150              		.align	2
 2151              	.L32:
 2152 0784 00000000 		.word	ulMouseX
 2153 0788 00000000 		.word	ulMouseY
 2154 078c 00000000 		.word	Stru_Bitmap_gbMouse
 2155              		.cfi_endproc
 2156              	.LFE5:
 2158              		.align	2
 2159              		.global	CursorView
 2161              	CursorView:
 2162              	.LFB6:
 181:../Bmp.c      **** 
 182:../Bmp.c      **** /*********************************************************************************************
 183:../Bmp.c      **** * name:		CursorView()
 184:../Bmp.c      **** * func:		cursor display
 185:../Bmp.c      **** * para:		none
 186:../Bmp.c      **** * ret:		none
 187:../Bmp.c      **** * modify:
 188:../Bmp.c      **** * comment:		
 189:../Bmp.c      **** *********************************************************************************************/
 190:../Bmp.c      **** void CursorView(INT16U x, INT16U y)
 191:../Bmp.c      **** {
 2163              		.loc 1 191 0
 2164              		.cfi_startproc
 2165              		@ Function supports interworking.
 2166              		@ args = 0, pretend = 0, frame = 8
 2167              		@ frame_needed = 1, uses_anonymous_args = 0
 2168 0790 0DC0A0E1 		mov	ip, sp
 2169              	.LCFI12:
 2170              		.cfi_def_cfa_register 12
 2171 0794 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2172 0798 04B04CE2 		sub	fp, ip, #4
 2173              		.cfi_offset 14, -8
 2174              		.cfi_offset 13, -12
 2175              		.cfi_offset 11, -16
 2176              	.LCFI13:
 2177              		.cfi_def_cfa 11, 4
 2178 079c 10D04DE2 		sub	sp, sp, #16
 2179 07a0 0020A0E1 		mov	r2, r0
 2180 07a4 0130A0E1 		mov	r3, r1
 2181 07a8 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 2182 07ac B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 192:../Bmp.c      **** 	CursorPush(x, y);
 2183              		.loc 1 192 0
 2184 07b0 BE205BE1 		ldrh	r2, [fp, #-14]
 2185 07b4 B0315BE1 		ldrh	r3, [fp, #-16]
 2186 07b8 0200A0E1 		mov	r0, r2
 2187 07bc 0310A0E1 		mov	r1, r3
 2188 07c0 FEFFFFEB 		bl	CursorPush
 193:../Bmp.c      **** 	BitmapView(x, y, Stru_Bitmap_gbMouse);
 2189              		.loc 1 193 0
 2190 07c4 BEE05BE1 		ldrh	lr, [fp, #-14]
 2191 07c8 B0C15BE1 		ldrh	ip, [fp, #-16]
 2192 07cc 28309FE5 		ldr	r3, .L35
 2193 07d0 0D20A0E1 		mov	r2, sp
 2194 07d4 081083E2 		add	r1, r3, #8
 2195 07d8 030091E8 		ldmia	r1, {r0, r1}
 2196 07dc 030082E8 		stmia	r2, {r0, r1}
 2197 07e0 0C0093E8 		ldmia	r3, {r2, r3}
 2198 07e4 0E00A0E1 		mov	r0, lr
 2199 07e8 0C10A0E1 		mov	r1, ip
 2200 07ec FEFFFFEB 		bl	BitmapView
 194:../Bmp.c      **** }
 2201              		.loc 1 194 0
 2202 07f0 0CD04BE2 		sub	sp, fp, #12
 2203 07f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2204 07f8 1EFF2FE1 		bx	lr
 2205              	.L36:
 2206              		.align	2
 2207              	.L35:
 2208 07fc 00000000 		.word	Stru_Bitmap_gbMouse
 2209              		.cfi_endproc
 2210              	.LFE6:
 2212              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Bmp.c
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1215   .rodata:00000000 ucMouseMap
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1212   .rodata:00000000 $d
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1461   .data:00000000 Stru_Bitmap_gbMouse
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1458   .data:00000000 $d
                            *COM*:00000002 ulMouseX
                            *COM*:00000002 ulMouseY
                            *COM*:00000078 ucCursorBackUp
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1473   .text:00000000 $a
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1476   .text:00000000 BitmapView
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1609   .text:0000018c BitmapPush
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1800   .text:000003ec $d
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1806   .text:000003f8 $a
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:1809   .text:000003f8 BitmapPop
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2010   .text:00000680 $d
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2014   .text:00000684 $a
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2017   .text:00000684 CursorInit
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2161   .text:00000790 CursorView
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2057   .text:000006d0 $d
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2062   .text:000006d8 $a
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2065   .text:000006d8 CursorPush
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2106   .text:00000730 $d
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2110   .text:00000734 $a
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2113   .text:00000734 CursorPop
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2152   .text:00000784 $d
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2158   .text:00000790 $a
C:\Users\a680669\AppData\Local\Temp\ccc8VT4P.s:2208   .text:000007fc $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
